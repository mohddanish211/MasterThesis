//$Id: ABS.ast 14824 2012-03-23 13:59:27Z jproenca $
/////////////////////////////////
/// mTVL - root and extension ///
/////////////////////////////////

// TODO: remove FeatureModelDecl when removing beaver parser, antlr doesn't need it
FeatureModelDecl ::= FeatureDecl* FExt*;

FExt ::= <Name> [Group] AttrConstraints;

FeatureDecl ::= <Name> [Group] AttrConstraints;

AttrConstraints ::= Attribute* Constr*;

Group ::=  Card:Cardinality FNode*;

abstract  FNode ::= FeatureDecl;
OptFeat:  FNode;
MandFeat: FNode;

abstract Cardinality;
AllOf:   Cardinality;
Minim:   Cardinality ::= <CFrom:int>;
CRange:  Cardinality ::= <CFrom:int> <CTo:int>;

Attribute ::= <Name> AType:MType;

abstract  MType ::= <Typename>;
UnresolvedMType: MType;
BoolMType: MType;
StringMType: MType;
IntMType:  MType ::= Min:BoundaryInt Max:BoundaryInt;
IntListMType:  MType ::= BoundaryVal*;

abstract BoundaryInt;
Limit: BoundaryInt;
BoundaryVal: BoundaryInt ::= <Value:int>;

abstract Constr;
IfIn:    Constr ::= Expr: MExp;
IfOut:   Constr ::= Expr: MExp;
Exclude: Constr ::= FeatVar;
Require: Constr ::= FeatVar;

abstract            MExp: Constr;
abstract SimpleExp: MExp;
abstract MUnary:    MExp ::= Operand: MExp;
abstract MBinary:   MExp ::= Left:MExp  Right:MExp;

////// some intersection with frontend PureExp
//Booleans
MNegExp: MUnary ;

abstract     MBoolExp: MBinary ;
MAndBoolExp: MBoolExp ;
MOrBoolExp:  MBoolExp ;
MImpliesExp: MBoolExp ;  // not in PureExp
MEquivExp:   MBoolExp ;  // not in PureExp

abstract MRelationalExpr: MBinary;
MLTExp:   MRelationalExpr ;
MGTExp:   MRelationalExpr ;
MLTEQExp: MRelationalExpr ;
MGTEQExp: MRelationalExpr ;

abstract   MEqualityExpr: MRelationalExpr;
MEqExp:    MEqualityExpr ;
MNotEqExp: MEqualityExpr ;

//Integers
MMinusExp : MUnary ;

abstract MArithmeticExpr : MBinary ;

abstract      MMultExp: MArithmeticExpr ;
MMultMultExp: MMultExp ;
MDivMultExp:  MMultExp ;
MModMultExp:  MMultExp ;

abstract    MAddExp: MArithmeticExpr ;
MAddAddExp: MAddExp ;
MSubAddExp: MAddExp ;

//// end of intersection with PureExp


// Variables and values
abstract Variable: SimpleExp;
MValue : SimpleExp ::= Value;
// Concrete values (IntVal, BoolVal, StringVal) are in abs.ast

// variables
AttVar:  Variable ::= <AName>;
FeatVar: Variable ::= <FName>;
FAVar:   Variable ::= <FName> <AName>;
