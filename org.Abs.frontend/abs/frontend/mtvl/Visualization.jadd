import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.mtvl.ChocoSolver;
//import mtvl.analyser.*;
import choco.Choco;
// import choco.Choco.MAX_UPPER_BOUND;
// import choco.Choco.MIN_LOWER_BOUND;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;

/**
Builds constraints and solve them.
Checks type errors, and if all variables are properly declared.
 **/


aspect Visualization {

    public void CompilationUnit.printFM(String indentation) {
        System.out.println(indentation + getName());
        for (FeatureDecl fdecl : getFeatureDeclList()) {
            fdecl.printFM(indentation + "\t");
        }
    }
    public void FeatureDecl.printFM(String indentation) {
        if(hasGroup()){
            System.out.print(indentation + getName() + "(");
            //getGroup().getCard().printFM();
            System.out.println(")");
            getGroup().printFM(indentation + "\t");    
        }
        else{
            System.out.println(indentation + getName());
        }
    }
    public void Group.printFM(String indentation) {
        for (FNode fnode : getFNodeList()){
            fnode.printFM(indentation + "\t");
        }
    }
    public void FNode.printFM(String indentation) {
        getFeatureDecl().printFM(indentation);
    }
}
