module RS.Util;

export *;

data State =
    Start | WaitToBoot | Booting |
    WaitToReplicate| WorkOnReplicate | End;

data Command =
    StartSnapShot | EndSnapShot | ListSchedule |
    SearchSchedule | EndSearchFile | AppendSearchFile |
    ReceivePatternFile |
    SkipFile | ContinueFile | OverwriteFile;

data JobType = Replication | Boot;

data ReplicationItemType =
    SearchReplicationDirectory | LogReplicationItem | ReplicationFilePattern;

type ClientId = Int;

// CSP set CheckPoint
// Java class com.fredhopper.search.fred.Checkpoint
// For Java method com.fredhopper.replication.server.item.SearchReplicationDirectory.isValid(String, long)
type CheckPoint = Int;

[TypeAnnotation]
data VarType = Adds | Modifies;

// test data
type TestData = Map<CheckPoint,Map<FileId,FileContent>>;

// CSP set FileId
// Used for identifying the file to be replicated
type FileId = String;

// CSP set FileSize
// Java method java.io.File.length()
// Used for identifying the state of the client-side file
type FileSize = Int;

// CSP name type File
type File = Pair<FileId,FileContent>;
type Directory = Pair<FileId,FileContent>;

// CSP name type Item
// Java class com.fredhopper.replication.server.item.ServerReplicationItem
type ReplicationItem = Pair<CheckPoint,Set<File>>;

// A File system structure
// internally file entry is organised hierarchically
// e.g. file 123 is organised 1/2/123 where 1 and 2 are directories
// default root directory id is 0
// This will be extended once we allowed file ids as strings like "12/34/56".
type FileEntry = Map<FileId,FileContent>;

// Java com.fredhopper.replication.server.SyncServerSchedule
data Schedule =
      SearchItem(FileId) | //top level directory
      FileItem(FileId,String) | //top level directory, pattern, checkpoint
      LogItem(FileId); //for now log item is the same as search item

// a set of schedules
type ServerSchedule = Set<Schedule>;

// seems cannot use type synonym Either
data FileContent = Content(FileSize) | Entries(FileEntry);

def Int failSafe() = 1;

def List<A> front<A>(List<A> ls) = reverse(tail(reverse(ls)));
def A last<A>(List<A> ls) = head(reverse(ls));

def List<A> insertList<A>(List<A> ls, A l, Int i) =
    case i {
        0 => Cons(l,tail(ls));
        _ => Cons(head(ls),insertList(tail(ls),l,i-1));
    };

def List<A> take<A>(List<A> ss,Int i) =
    case i {
        0 => Nil;
        _ => case ss {
                Nil => Nil;
                Cons(x,xs) => Cons(x,take(xs,i-1));
            };
    };

def Set<A> takeSet<A>(Set<A> ss,Int i) =
    case i {
        0 => EmptySet;
        _ => case ss {
                EmptySet => EmptySet;
                Insert(x,xs) => Insert(x,takeSet(xs,i-1));
            };
    };

def Map<A,B> takeMap<A,B>(Map<A,B> mp,Int i) =
    case i {
        0 => EmptyMap;
        _ => case mp {
                EmptyMap => EmptyMap;
                InsertAssoc(x,xs) => InsertAssoc(x,takeMap(xs,i-1));
            };
    };

def Set<A> listToSet<A>(List<A> a) =
    case a {
        Nil => EmptySet;
        Cons(x,xs) => Insert(x,listToSet(xs));
    };

// Function on Maybe
def A fromJustDefault<A>(Maybe<A> m, A a) =
    case m { Just(j) => j; Nothing => a; };

// Functions on set of pairs
def Set<A> fsts<A, B>(Set<Pair<A, B>> ps) =
  case ps {
    EmptySet => EmptySet;
    Insert(x,xs) => Insert(fst(x),fsts(xs));
  };

def Set<B> snds<A, B>(Set<Pair<A, B>> ps) =
  case ps {
    EmptySet => EmptySet;
    Insert(x,xs) => Insert(snd(x),snds(xs));
  };

// Functions on set
def Set<A> union<A>(Set<A> set1, Set<A> set2) =
    case set1 {
        EmptySet => set2;
        Insert(s, ss) => Insert(s, union(ss, remove(set2,s)));
    };

// Functions on data Command
def Bool isAppendCommand(Command c) =
    case c {
        SkipFile => True;
        ContinueFile => True;
        OverwriteFile => True;
        _ => False;
    };

def Maybe<Int> hasValue(Map<Int,Command> m, Command b) =
    case m {
        EmptyMap => Nothing ;
        InsertAssoc(Pair(x,y), tail) =>
            case y == b {
                True => Just(x);
                False => hasValue(tail,b);
            };
    };

def Map<Int,Command> commandMap() =
    map [
        Pair(200,ContinueFile),
        Pair(201,OverwriteFile),
        Pair(202,SkipFile),
        Pair(10,StartSnapShot),
        Pair(11,EndSnapShot),
        Pair(300,SearchSchedule),
        Pair(301,ListSchedule)
    ];

// convert a command to its corresponding integer
def Int cmdToint(Command command) =
    fromJust(hasValue(commandMap(),command));

// convert an integer to its corresponding command
def Command intTocmd(Int i) = lookupUnsafe(commandMap(),i);

// Insert 'a' at position i of list.
def List<A> setAt<A>(List<A> list, A a, Int i) =
    case list {
        Nil => Nil;
        Cons(p,l) =>
            case i {
                0 => Cons(a,l);
                _ => Cons(p,setAt(l,a,i-1));
             };
    };

def Bool setEquals<A>(Set<A> s, Set<A> t) = size(s) == size(t) && subset(s,t);

// t is a subset of s
def Bool subset<A>(Set<A> s, Set<A> t) =
    case t {
        EmptySet => True;
        Insert(x,xs) => contains(s,x) && subset(s,xs);
    };

//
def Int pow(Int b, Int e) =
    case e {
        0 => 1;
        _ => b * pow(b,e-1);
    };


// String operations
// c must have length 1 currently
def List<String> split(String text, String c) =
    case strlen(text) == 0 {
        True => Nil;
        False => split2(tailStr(text),c,Cons(headStr(text),Nil));
    };

def List<String> split2(String text, String c, List<String> result) =
    case strlen(text) == 0 {
        True => reverse(result);
        False =>
            let (String hd) = headStr(text) in
            case hd == c {
                True => split2(tailStr(text),c,Cons("",result));
                False => split2(tailStr(text),c,Cons(head(result) + hd,tail(result)));
            };
    };

def String headStr(String text) = substr(text,0,1);
def String tailStr(String text) = substr(text,1,strlen(text)-1);

// if list2 is a prefix of list1
def Bool isPrefix<A>(List<A> list1, List<A> list2) =
    case list2 {
        Nil => True;
        Cons(l,ll) =>
            case list1 {
                Nil => False;
                Cons(m,mm) => (l == m) && isPrefix(mm,ll);
            };
    };

def List<String> stringToChar(String s) =
    let (Int l) = strlen(s) in
    case l == 0 {
        True => Nil;
        False => Cons(headStr(s),stringToChar(tailStr(s)));
    };

def Bool isPrefixText(String s1, String s2) = isPrefix(stringToChar(s2),stringToChar(s1));

def Bool filter(String pattern, String text) = isPrefixText(pattern,text);

// filters a set of strings against some pattern
def Set<String> filters(String pattern, Set<String> ts) =
    case ts {
        EmptySet => EmptySet;
        Insert(l,ls) =>
            case filter(pattern,l) {
                True => Insert(l,filters(pattern,ls));
                False => filters(pattern,ls);
            };
    };

def Bool isSearchItem(Schedule s) = case s { SearchItem(_) => True; _ => False; };
def Bool isFileItem(Schedule s) = case s { FileItem(_,_) => True; _ => False; };
def Bool isLogItem(Schedule s) = case s { LogItem(_) => True; _ => False; };

def Either<FileId,Pair<FileId,String>> item(Schedule s) =
    case s {
        SearchItem(i) => Left(i);
        FileItem(i,r) => Right(Pair(i,r));
        LogItem(i) => Left(i);
    };

// if id1 is an ancester of id2
def Bool isAncester(FileId id1, FileId id2) =
    isPrefix(deroot(split(id2,fileSep())),deroot(split(id1,fileSep())));

def List<String> deroot(List<String> path) =
    let (FileId r) = rootId() in case path { Cons(r,ps) => ps; _ => path; };

def File file(FileId i, FileSize s) = Pair(i,Content(s));
def Directory rootDir() = emptyDir(rootId());
def Directory emptyDir(FileId i) = Pair(i,Entries(EmptyMap));
def Directory dir(FileId i, FileEntry e) = Pair(i,Entries(e));

def String fileSep() = "/";
def FileId rootId() = "root";
def Bool isFile(FileContent c) = case c { Content(_) => True; _ => False; };
def Bool isDirectory(FileContent c) = ~isFile(c);

// partial
def FileSize content(FileContent c) = case c { Content(s) => s; };
def FileSize fileContent(File f) = content(snd(f));

// partial
def FileEntry entries(FileContent c) = case c { Entries(fs) => fs; };
def FileEntry dirContent(Directory f) = entries(snd(f));

def FileId getFileId(Either<File,Directory> f) =
    case f {
        Left(Pair(id,_)) => id;
        Right(Pair(id,_)) => id;
    };

def FileContent getFileContent(Either<File,Directory> f) =
    case f {
        Left(Pair(_,s)) => s;
        Right(Pair(_,fs)) => fs;
    };

def Either<File,Directory> makeContent(Pair<FileId,FileContent> content) =
    case isFile(snd(content)) {
        True => Left(content);
        False => Right(content);
    };

// given a/b and c returns a/b/c
def FileId makePath(FileId dir, FileId f) = dir + fileSep() + f;
def FileId makePaths(List<String> fs) =
    case fs {
        Nil => "";
        Cons(f,Nil) => f;
        Cons(f,gs) => f + fileSep() + makePaths(gs);
    };

// given a/b/c returns (a/b,c)
def Pair<FileId,FileId> splitFileId(FileId f) = Pair(dirName(f),fileName(f));

// given a/b/c returns c
def FileId fileName(FileId f) = head(reverse(split(f,fileSep())));

// given a/b/c returns a/b
def FileId dirName(FileId f) = makePaths(reverse(tail(reverse(split(f,fileSep())))));

// get fully qualified file ids from the suppied directory recursively
def Set<FileId> getFileIdFromDir(Directory d) =
    case snd(d) {
        Entries(e) =>
            case fst(d) == rootId() {
                True => getFileIdFromEntries1(e);
                False => getFileIdFromEntries(fst(d),e);
            };
    };

def Set<FileId> getFileIdFromEntries1(FileEntry fe) =
    case fe {
        EmptyMap => EmptySet;
        InsertAssoc(Pair(i,c),fs) =>
            case isFile(c) {
                True => Insert(i,getFileIdFromEntries1(fs));
                False => union(getFileIdFromEntries(i,entries(c)),getFileIdFromEntries1(fs));
            };
    };

def Set<FileId> getFileIdFromEntries(FileId id, FileEntry fe) =
    case fe {
        EmptyMap => EmptySet;
        InsertAssoc(Pair(i,c),fs) =>
            case isFile(c) {
                True => Insert(makePath(id,i),getFileIdFromEntries(id,fs));
                False => union(getFileIdFromEntries(makePath(id,i),entries(c)),getFileIdFromEntries(id,fs));
            };
    };

def Bool hasEntriesIn(Directory d, FileId id) = case snd(d) { Entries(e) => hasEntry(e,id); };
def Bool hasEntry(FileEntry f, FileId id) = isJust(findFromEntry(f,id));

// find either a file or a directory (if it exists) given
// the file name (suffix of a fully qualified path)
def Maybe<Either<File,Directory>> findFromEntryIn(Directory d, FileId id) =
    case snd(d) { Entries(e) => findFromEntry(e,id); };

// find either a file or a directory (if it exists) given
// the file name (suffix of a fully qualified path)
def Maybe<Either<File,Directory>> findFromEntry(FileEntry f, FileId id) =
    case contains(keys(f),id) {
        True =>
            case lookupUnsafe(f,id) {
                Content(s) => makeMaybeEitherValue(True,id,Content(s)); // leaf
                Entries(e) => makeMaybeEitherValue(False,id,Entries(e)); // leaf
            };
        False =>
            case f {
                InsertAssoc(Pair(i,Content(_)),fm) => findFromEntry(fm,id);
                InsertAssoc(Pair(i,Entries(g)),fm) =>
                        case findFromEntry(g,id) {
                            Nothing => findFromEntry(fm,id); //next path
                            r => qualify(r,i);
                        };
                EmptyMap => Nothing; // end of listing
            };
    };

// prefix id of 'r' with 'path'
def Maybe<Either<File,Directory>> qualify(Maybe<Either<File,Directory>> r, FileId path) =
    case r {
        Just(h) =>
            let (FileId hi) = makePath(path,getFileId(h)) in
            let (FileContent hc) = getFileContent(h) in
            case h {
                Left(_) => makeMaybeEitherValue(True,hi,hc);
                Right(_) => makeMaybeEitherValue(False,hi,hc);
            };
        Nothing => Nothing;
    };

def Maybe<Either<File,Directory>> makeMaybeEitherValue(Bool isfile, FileId id, FileContent c) =
    case isfile {
        True => Just(Left(Pair(id,c)));
        _ => Just(Right(Pair(id,c)));
    };

def Bool hasQualifiedEntriesIn(Directory d, FileId qualified) =
    case snd(d) { Entries(e) => hasQualifiedEntry(e,qualified); };

def Bool hasQualifiedEntry(FileEntry f, FileId qualified) = isJust(getFromEntry(f,qualified));

def Maybe<FileContent> getFromEntryIn(Directory d, FileId qualified) =
    case snd(d) {
        Entries(e) =>
            case fst(d) == rootId() {
                True => getFromEntry(e,qualified); //root id '0' is disregard
                _ => getFromEntry(InsertAssoc(d,EmptyMap),qualified);
            };
    };

// get the content (if it exists) from a fully qualified path
def Maybe<FileContent> getFromEntry(FileEntry entry, FileId qualified) =
    let (List<String> paths) = split(qualified,fileSep()) in
    case length(paths) > 0 {
        True =>
            case contains(keys(entry),head(paths)) {
                True =>
                    let (FileContent cc) = lookupUnsafe(entry,head(paths)) in
                    case length(tail(paths)) {
                        0 => Just(cc); // at node
                        _ => case cc {
                                // qualified is of form 'a/b/...'
                                // but at this level 'a' is a file and not a directory
                                Content(_) => Nothing;
                                // else we are on the right track
                                // go to the subdirectory
                                Entries(e) => getFromEntry(e,makePaths(tail(paths)));
                            };
                    };
                False => Nothing; //not found
            };
        False => Nothing;
    };

def Directory updateDirWithContent(Directory d, FileId i, FileContent c) = updateDirWith(d,makeContent(Pair(i,c)));
def Directory updateDirWithContents(Directory d, Map<FileId,FileContent> contents) =
    case contents {
        EmptyMap => d;
        InsertAssoc(Pair(i,c),cs) => updateDirWithContents(updateDirWithContent(d,i,c),cs);
    };

// Update a directory with a file
def Directory updateDirWithFile(Directory d, File f) = updateDirWith(d,Left(f));

// Update a directory with a directory
def Directory updateDirWithDir(Directory d, Directory f) = updateDirWith(d,Right(f));

// Update a directory with either a directory or a file
def Directory updateDirWith(Directory d, Either<File,Directory> f) = case snd(d) { Entries(e) => Pair(fst(d),Entries(updateFile(e,f))); };

def FileEntry updateFile(FileEntry fe, Either<File,Directory> f) =
    updateFile1(fe,getFileContent(f),deroot(split(getFileId(f),fileSep())));

def FileEntry updateFile1(FileEntry fe, FileContent c, List<String> path) =
    case path {
        Nil => fe;
        Cons(p,Nil) => put(fe,p,c);
        Cons(p,ps) =>
            case contains(keys(fe),p) {
                True =>
                    case lookupUnsafe(fe,p) {
                        Entries(dc) => put(fe,p,Entries(updateFile1(dc,c,ps))); //dir
                        _ => put(fe,p,create(ps,c));  //file
                    };
                False => put(fe,p,create(ps,c));
            };
    };

def FileContent create(List<String> path, FileContent c) =
    case c {
        Content(s) =>
            case path {
                Cons(p,Nil) => Entries(InsertAssoc(Pair(p,c),EmptyMap));
                Cons(p,ps) => Entries(InsertAssoc(Pair(p,create(ps,c)),EmptyMap));
            };
        _ => c;
    };
