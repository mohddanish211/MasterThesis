module GUI;

export Window, WindowImpl; 
export ButtonListener, Button;
export TextField;

interface ButtonListener {
   Unit pressed();
}

interface Window {
   [Near] Button newButton(String label);
   [Near] TextField newTextField();
}

interface TextField {
   String getText();
   Unit setText(String newText);
}

interface Button {
   Unit press();
   String getLabel();
   Unit registerListener(ButtonListener l);
}

class TextFieldImpl implements TextField {
  String text = "";
  String getText() {
     return text;
  }

  Unit setText(String s) {
  	 text = s;
  }
}

[COG]
class WindowImpl implements Window {
   [Near] Button newButton(String label) {
      return new local ButtonImpl(this, label);
   }
   
   TextField newTextField() {
   	  return new local TextFieldImpl();
   }
}

[Plain] 
class ButtonImpl([Near] Window gui, String label) implements Button {
    List<ButtonListener> listener = Nil;
   
	Unit press() {
		List<ButtonListener> r = listener;
		while (r != Nil) {
			ButtonListener l = head(r);
			l ! pressed();
			r = tail(r);
		}	
	}
	
	String getLabel() {
		return label;
	}
	
	Unit registerListener(ButtonListener l) {
		listener = Cons(l,listener);
	}
}