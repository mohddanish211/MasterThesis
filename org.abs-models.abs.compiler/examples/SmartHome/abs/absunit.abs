module AbsUnit;

export *;

import Matcher from AbsUnit.Hamcrest;

[TypeAnnotation]
data DataPoint = DataPoint; //data function

[TypeAnnotation]
data Test = Test; //test method

[TypeAnnotation]
data Fixture = Fixture; //fixture

[TypeAnnotation]
data Suite = Suite; //test suite

// deprecated use Fixture
[TypeAnnotation]
data TestClass = TestClass; //test class

// deprecated use TestImpl
[TypeAnnotation]
data TestClassImpl = TestClassImpl; //test class implementation

[TypeAnnotation]
data Ignored = Ignored; // ignore test method

[TypeAnnotation]
data Before = Before; // set up fixture

[TypeAnnotation]
data After = After; // tear down fixture

interface Comparator { 
	Int compare(); 
}

interface ABSAssert {
	Unit assertTrue(Bool value);
	Unit assertFalse(Bool value);
	Unit assertEquals(Comparator comp);
	Unit assertNotEquals(Comparator comp);	
	Unit assertThat(Matcher matcher);
}

class ABSAssertImpl implements ABSAssert {
	
	Unit assertTrue(Bool value) {
		if (~value) {
			// collect result
			assert False;
		} 
	}
	
	Unit assertFalse(Bool value) {
		if (value) {
			// collect result
			assert False;
		} 
	}
	
	Unit assertEquals(Comparator comp) {
		Int result = comp.compare();
		if (result != 0) {
			// collect result
			assert False;
		}
	}
	
	Unit assertNotEquals(Comparator comp) {
		Int result = comp.compare();
		if (result == 0) {
			// collect result
			assert False;
		}		
	}
	
	Unit assertThat(Matcher matcher) {
		Bool result = matcher.matches();
		if (~result) {
			// collect result
			assert False;
		}
	}
	
}	