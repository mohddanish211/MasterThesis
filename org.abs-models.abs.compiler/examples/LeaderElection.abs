module LeaderElection;

def Int numNodes() = 3;

interface Node {
   Unit setNextNode(Node n);
   Unit findLeader(Node currentLeader, Int leaderId);
   Unit electLeader();
}

class NodeImpl(Int id) implements Node {
   Node next;
   Bool electionRunning = False;
   Node leader;
    
   Unit setNextNode(Node n) {
      next = n;
   }

   Unit electLeader() {
      await electionRunning == False;
      electionRunning = True;
      await next != null;
      next!findLeader(this,id);
   }
	
    
   Unit findLeader(Node currentLeader, Int leaderId) {
      await next != null;
      if (id > leaderId) {
         leader = this;
         next!findLeader(this,id);
      } else if (id == leaderId) {
         electionRunning = False;
      } else {
         leader = currentLeader;
         next!findLeader(currentLeader, leaderId);
      }
   }
}

{
   List<Node> nodes = Nil;
   Int num = numNodes();

   Node prevNode;
   Node n;
   Node first;

   first = new NodeImpl(0);
   prevNode = first;

   Int id = 1;
   while (id < num) {
      n = new NodeImpl(id);
      n!setNextNode(prevNode);
      prevNode = n;
      nodes = Cons(n,nodes);
      id = id +1;
   } 
   assert first != null;
   first!setNextNode(n);
   first!electLeader();
}