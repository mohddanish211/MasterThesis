module BackendTest;
import * from ABS.Scheduler;

def Maybe<Process> find_process_named(String name, List<Process> l) =
if l == Nil then Nothing
else if method(head(l)) == name then Just(head(l))
else find_process_named(name, tail(l));

def Process my_scheduler(List<Process> queue) =
let (Maybe<Process> first) = find_process_named("first", queue) in
if isJust(first) then fromJust(first)
else let (Maybe<Process> second) = find_process_named("second", queue) in
if isJust(second) then fromJust(second)
else head(queue);

interface I {
    Unit first();
    Unit second();
    Bool getState();
}

[Scheduler: my_scheduler(queue)]
class C implements I {
    Bool flag = False;
    Bool testresult = False;
    Unit first() { await flag; testresult = False; }
    Unit second() { await flag; testresult = True; }
    Bool getState() { flag = True; suspend; return testresult; }
}

{
    I o = new C();
    o!first();
    o!first();
    o!first();
    o!first();
    o!first();
    o!first();
    o!first();
    o!first();
    o!first();
    o!first();
    o!first();
    o!second();
    o!first();
    o!first();
    Bool testresult = await o!getState();
    println("Result: " + toString(testresult));
}
