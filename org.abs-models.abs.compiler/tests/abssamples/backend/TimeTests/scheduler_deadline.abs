module BackendTest;
import * from ABS.Scheduler;

def Process find_shortest_deadline(Process candidate, List<Process> l) =
  if l == Nil then candidate
  else if durationLessThan(proc_deadline(head(l)), proc_deadline(candidate))
    then find_shortest_deadline(head(l), tail(l))
    else find_shortest_deadline(candidate, tail(l));

def Process earliest_deadline_scheduler(List<Process> queue) =
find_shortest_deadline(head(queue), tail(queue));

interface I {
    Unit with_deadline();
    Bool getState();
}

//[Scheduler: earliest_deadline_scheduler(queue)]
class C implements I {
    Bool flag = False;
    Bool testresult = True;
    Unit with_deadline() {
        await flag;
        duration(1, 1); // we should start with deadline=2, don't fall to 0
        testresult = testresult && (durationValue(deadline()) > 0);
    }
    Bool getState() { flag = True; suspend; return testresult; }
}

{
    I o = new C();
    Int nProcesses = 100;
    Int p = 0;
    while (p < nProcesses) {
        p = p + 1;
        [Deadline: Duration(p + 1)] o!with_deadline();
    }
    Bool testresult = await o!getState();
    println("Result: " + toString(testresult));
}

