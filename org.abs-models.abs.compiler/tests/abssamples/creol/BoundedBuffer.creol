/*
 * BoundedBuffer.creol -- Bounded buffer example
 *
 * This file is part of creoltools
 *
 * Written and Copyright (c) 2007 by Marcel Kyas
 *
 * Inspired by Nancy Lynch, "Distributed Systems"
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

interface BufferA
begin with Producer
  op append(in d: Data)
end

interface BufferR
begin with Consumer
  op remove(out d: Data)
end

interface Buffer inherits BufferA, BufferR
begin 
end

class BoundedBuffer implements Buffer
begin 
  var buffer: List[Data] := nil
  var max: Int := 10
  var n: Int := 0

  op init == skip
  op run == skip

  with Producer
    op append(in d:Data) == await n < max; buffer, n := buffer |- d, n + 1
  with Consumer
    op remove(out d:Data) ==
      await n > 0; d := head(buffer); buffer, n := tail(buffer), n - 1
end


interface Consumer
begin
end

interface Producer
begin 
end

class Producer(b: BufferA)
  contracts Producer
begin
  op init == skip
  op run == !loop(0)
  op loop(in i: Int) == b.append(i;); !loop(i+1)
end


class Consumer (b: BufferR)
  contracts Consumer
begin
  op init == skip
  op run == var y:Data; b.remove(;y); !run()
end

class Starter
begin
  op init == skip
  op run == var b: Buffer; var p: Producer; var c: Consumer; 
            b := new BoundedBuffer(); 
            p := new Producer(b);
            c := new Consumer(b)
end
