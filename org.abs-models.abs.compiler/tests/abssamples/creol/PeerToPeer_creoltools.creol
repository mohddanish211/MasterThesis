/*
 * PeerToPeer.creol -- The peer to peer example
 *
 * This file is part of creoltools
 *
 * Written and Copyright (c) 2007 by Marcel Kyas
 *
 * Adapted from:
 *
 * @Article{johnsen07sosym,
 *   author =	 {Einar Broch Johnsen and Olaf Owe},
 *   title =	 {An Asynchronous Communication Model for Distributed
 *                Concurrent Objects},
 *   journal =	 {Software and Systems Modeling},
 *   year =	 2007,
 *   volume =	 6,
 *   number =	 1,
 *   pages =	 {35--58},
 *   month =	 mar,
 * }
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
interface Client
begin
  with Any
    op availFiles (in sList: List[Server];
		   out files: List[[Server, List[String]]])
    // op reqFiles
end

interface Server
begin
  with Server
    op enquire(out files: List[String])
    op getLength(in fId: String; out lth: Int)
    op getPack(in fId: String, pNbr: Int; out pack: Data)
end

interface Peer
  inherits Client, Server
begin
end

interface DB
begin
  with Server
    op getFile(in fId: String; out file: List[List[Data]])
    op getLength(in fId: String; out length: Int)
    op storeFile(in fId: String, file: List[Data])
    op listFiles(out fList: List[String])
end

class Node(db: DB)
  contracts Peer, Server
begin
  with Server
    op enquire(out files: List[String]) ==
      await db.listFiles(; files)
    op getLength(in fId: String; out lth: Int) ==
      await db.getLength(fId; lth)
    op getPack(in fId: String, pNbr: Int; out pack: Data) ==
      var f: List[List[Data]];
      await db.getFile(fId; f);
      pack := nth(f, pNbr)

  with Any
    op availFiles (in sList: List[Server];
		   out files: List[[Server , List[String]]]) ==
      var l1: Label[List[String]] ;
      var l2: Label[List[[Server, List[String]]]] ;
      var fList: List[String] ;
      if (sList = nil)
      then files := nil
      else
        l1!head(sList).enquire();
        l2!(this as Client).availFiles(tail(sList));
	await l1? && l2?;
	l1?(fList);
	l2?(files);
	files := files |- (head(sList), fList)
      end

    op reqFile(in sId: Server, fId: String) ==
      var file: List[Data];
      var pack: Data;
      var lth: Int;
      await sId.getLength(fId; lth);
      while (lth > 0) do
	await sId.getPack(fId, lth; pack);
	file := pack -| file;
	lth := lth - 1
      end;
      !db.storeFile(fId, file)
end

