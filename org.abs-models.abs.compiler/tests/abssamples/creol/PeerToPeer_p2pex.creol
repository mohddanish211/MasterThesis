interface Peer inherits Client, Server 
begin 
end 

interface DB
begin
  with Server
    op getFile(in fId: String; out file: List[Package])
    op getLength(in fId: String; out length: Int)
    op storeFile(in fId: String, file: List[Package])
    op listFiles(out fSet: Set[String])
end

interface Client
begin
  with Client
    op availFiles (in sList: List[Server];  out files: List[[Server, Set[String]]])
    op reqFile(in sId: Server, fId: String)
end

interface Server
begin
  with Server
    op enquire(out files: Set[String])
    op getLength(in fId: String; out lth: Int)
    op getPack(in fId: String, pNbr: Int; out pack: Package)
end

class DataBase(db : Map[String, List[Package]]) implements DB
begin
  with Server 
    op getFile(in fId:String;  out file:List[Package]) == file := get(db, fId)
    op getLength(in fId:String;  out length:Int) == length:= #(get(db,fId))
    op storeFile(in fId:String, file:List[Package]) == db:= insert(db,fId,file)
    op listFiles(out fSet: Set[String]) == fset:= keys(db) 
end 

class Node(db: DB, admin:Peer, file:String) implements Peer
begin
    var catalog : List[[Server, Set[String]]];

    op  findServer(in  fId:String, catalog : List[[Server, Set[String]]]; out server:Server)==
      if isempty(catalog) then 
        server := null 
      else 
        if (fId in  snd(head(catalog))) then 
          server := fst(head(catalog)) 
        else 
          findServer(fId, tail(catalog); server) 
        end 
      end 

    op run == 
      var l:Label[List[[Server, Set[String]]]]; 
      var neighbors: List[Server]; 
      var server:Server;
      admin.getNeighbors(;neighbors); 
      l!this.availFiles(neighbors); await l?; l?(catalog);
      findServer(file,catalog; server); this.reqFile(server,file;)

  with Server
    op enquire(out files: Set[String]) == await db.listFiles(; files)
    op getLength(in fId: String; out lth: Int) == await db.getLength(fId; lth)
    op getPack(in fId: String, pNbr: Int; out pack: Package) ==
      var f: List[Package]; 
      await db.getFile(fId; f); 
      pack := nth(f, pNbr)

  with Client
    op availFiles (in  sList: List[Server]; out files: List[[Server, Set[String]]]) ==
      var l1: Label[Set[String]]; 
      var l2: Label[List[[Server, Set[String]]]] ;
      var fList: Set[String];
      if (sList = nil) then 
        files := nil
      else 
        l1!head(sList).enquire(); 
        l2!this.availFiles(tail(sList));
        await l1? && l2?; 
        l1?(fList); 
        l2?(files);
        files := files |- (head(sList), fList) 
      end

    op reqFile(in sId: Server, fId: String) ==
      var file: List[Package] := nil; 
      var pack: Package; 
      var lth: Int;
      await sId.getLength(fId; lth);
      while (lth > 0) do 
        await sId.getPack(fId, lth; pack);
        file := pack -| file; 
        lth := lth - 1 
      end; 
      !db.storeFile(fId, file)
end 
