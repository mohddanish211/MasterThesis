module Env;
export *;
import Foreign from ABS.FLI;

interface IO {
   Unit println(String s);
}

[Foreign]
class IO implements IO {
   List<String> history = Nil;
   Unit println(String s) { 
          history = appendright(history,s);
   }
}

// test the original() call substitution
module HowOriginal;
import * from Env;

interface FooI {
	Unit bar();
}

class Foo(IO io) implements FooI {
	Unit bar() {
		io.println("core");
	}
}

delta D1 {
	modifies class Foo {
		modifies Unit bar() {
			io.println("D1");
		}
	}
}

delta D2a {
	modifies class Foo {
		modifies Unit bar() {
			D1.original();
			io.println("D2a");
		}
	}
}

delta D2b {
	modifies class Foo {
		modifies Unit bar() {
			D1.original();
			io.println("D2b");
		}
	}
}

delta D3 {
	modifies class Foo {
		modifies Unit bar() {
			io.println("-----");
			D2a.original();
			io.println("-----");
			D2b.original();
			io.println("-----");
		}
	}
}

class Application(IO io) {
	Unit run() {
		FooI foo = new local Foo(io);
		foo.bar();
	}
}


//*****************************************************************

productline PL {
    features Core, F1, F2;

    delta D1 when Core;
    delta D2a after D1 when F1;
    delta D2b after D1 when F2;
    delta D3 after D2a, D2b when F1 && F2; 
}

//*****************************************************************

product P1(Core, F1);
product P2(Core, F2);
product P12(Core, F1, F2);

//*****************************************************************

// MainBlock
{
	IO io = new local IO();
	io.println("HEEELP!!");
    new local Application(io);
}

