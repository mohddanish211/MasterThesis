module ExprProblemParametricDeltas;
// First syntax sketch for delta notation.  Currently non-parseable.


interface Exp {
    String print();
}

class Lit(Int value) implements Exp {
    String print() {
        return intToString(value);
    }
}

class Test {

    Exp a;
    String output = "";

    Unit run() {
        a=new local Lit(3);
        output = a.print();
    }
}


delta DTestEval(X hasMethod Unit run(), hasAttribute String output,
                hasAttribute Exp a)
{
    modifies class X {
        modifies Unit run() {
            original();
            Int result = a.eval();
            output = output + " " + intToString(result);
        }
    }
}


delta DLitEval {

    modifies interface Exp {
        adds Int eval();
    }

    modifies class Lit {
        adds Int eval() {
            return value;
        }
    }
}


delta DAddPrint { 

    adds class Add(Exp expr1, Exp expr2) implements Exp {
        String print() {
            return expr1.print() + " + " + expr2.print();
        }
    }

    modifies class Test {
        modifies Unit run() {
            original();
            a = new local Add(a, a);
            String result = ""; result = a.print();
            output = output + " " + result;
        }
    }
}




delta DAddEval {

    modifies class Add {
        adds Int eval() {
            return expr1.eval() + expr2.eval();
        }
    }
}


delta DNegPrint {

    adds class Neg(Exp expr) implements Exp {

        String print() {
            String result = ""; result = expr.print();
            return " -(" + result + ") ";
        }
    }

    modifies class Test {
        modifies Unit run() {
            original();
            a = new local Neg(a);
            String result = ""; result = a.print();
            output = output + " " + result;
        }
    }
}



delta DNegEval {  

    modifies class Neg {
   
        adds Int eval() {
            Int result = 0; result = expr.eval();
            return -1 * result;
        }
    }
}



product line Epl {
    features Lit, Print, Add, Eval, Neg;
    core Lit, Print;
    feature model satisfies Lit && Print;
    // Dave, please insert uTVL feature model here

    delta DLitEval when Eval;
    delta DTestEval(Test) when Eval;
    delta DAddPrint after DEval when Add;
    delta DAddEval after DAddPrint when Add && Eval;
    delta DTestEval(Test) after DAddPrint when Add && Eval;
    delta DNegPrint after DAddEval when Neg;
    delta DNegEval after DNegPrint when Neg && Eval;
    delta DTestEval(Test) after DNegPrint when Neg && Eval;
}

product LitPrintAddEval is Lit, Print, Add, Eval;

{
    new local Test();
}
