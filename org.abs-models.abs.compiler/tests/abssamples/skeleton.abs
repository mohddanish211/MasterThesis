//$Id: skeleton.abs 1007 2010-01-19 10:33:57Z atorjusen $
module Skeleton;


//Interface declarations, extends is optional 
interface Foo1 {} 
interface Foo2 {}
interface Foo extends Foo1, Foo2 {} 

// "implements" is optional
class BazClass  {  }
class BazClass2 implements Foo1, Foo2 {  }

//Semicolon after variable or field declaration IFF there are declarations. 
//I.e 
//No semicolon if there are no declarations 
class FooClass implements Foo, Bar {  }

data Data = SomeData;

//Must have semicolon if there are declarations
class BarClass implements Foo { Int n = 5 ; Foo1 f ; }

interface Bar { } 

interface Buffer {

    Unit init(Foo f, Bar b);
    Unit append(Int i);
    Data remove();
    Int m();

}


//Class declarations 
class BoundedBuffer implements Buffer {
    
    //var_or_field_decl_list
    Int max = 5;
    Int n = 4;

    //Method list 
  
    Int m() { return n; }
    Unit init(Foo x, Bar y){
		
	Int x = 3;  
	Int y = 2; 


	return null ;
    
    }
	
	Data remove() { return SomeData; }
    Unit append(Int i){ skip; return null ; }

}
//MAIN
{
    //var_or_field_decl_list
        Int x = 5; 
	Int y = 5 ; 
	Bool z = True; 	
	Buffer o
	;
	
	Fut<Int> f;
	//Stmts 
	//Assignments to pure expressions
	x = y ; 
	x = null ; 
	x = f.get ;
	z = True ;
	z = False ; 
	/* Assignments to expressions 
	   with side effects.
	 */
	Foo1 foo;
	foo = new local BazClass2() ;
	Bar b;
	b = new local FooClass();
	Foo foo2;
	foo2 = new local FooClass();
	//y = new FooClass() ; FIXME: support cog in Eclipse Plugin parser
	f = o!m();
	y = o.m();
	
	o!init(foo2,b);
	//Await statements 
	await f? ; 
	await f? & f? ; 
	await f? & f? & f?  ;
	await True ; 
	//skip, suspend, if_th_else
	skip ; 
	suspend ; 
	if (z) z = True ; 
	if (z) z = True ; else z = False ;
	if (z) z = True ; else { z = False ; x = null ; } 
	

	//Stmtblock
	{ x = y ; skip ; await f? ; } 
    skip ;
	//Return  
    return null ;
}

