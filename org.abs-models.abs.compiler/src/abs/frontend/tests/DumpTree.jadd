aspect DumpTree {

    
	//Added by ATO: 
	public void ASTNode.dumpTree(String indent, java.io.PrintStream pStream) {
		pStream.println(indent + this.getClass().getName());
		String childIndent = indent + "  ";
		for(int i = 0; i < getNumChild(); i++)
			getChildNoTransform(i).dumpTree(childIndent, pStream);
	}

	public void VarOrFieldDecl.dumpTree(String indent, PrintStream stream) {
	    stream.println(indent + this.toString() + "\t\t" + this.getName());
	}
	
	
	public void TypedVarOrFieldDecl.dumpTree(String indent, java.io.PrintStream pStream) {
		pStream.println(indent + this.toString() + "\t\t" +  this.getName() + " : " 
						+  (this.getAccess()));
		String childIndent = indent + "  ";
		for(int i = 0; i < getNumChild(); i++)
			getChildNoTransform(i).dumpTree(childIndent, pStream);
	}
	
	public void IdUse.dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  this.getName());
	}

	public void DataTypeUse.dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  this.getName());
	}

	public void VarOrFieldUse.dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  this.getName());
	}

	public void DataConstructorExp.dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  this.getConstructor());
		String childIndent = indent + "  ";
		for(int i = 0; i < getNumChild(); i++)
			getChildNoTransform(i).dumpTree(childIndent, pStream);
		
	}

	public void DataConstructor.dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  this.getName());
		String childIndent = indent + "  ";
		for(int i = 0; i < getNumChild(); i++)
			getChildNoTransform(i).dumpTree(childIndent, pStream);
		
	}



	public void AssignStmt.dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  ((VarOrFieldUse)this.getVar()).getName() + "=");
		this.getValue().dumpTree("",pStream);
		pStream.println();
	}

	/*
	  public void CaseBranch.dumpTree(String indent, java.io.PrintStream pStream) {
		String childIndent = indent;
	   	pStream.println(indent + this.toString() + "\t\tLEFT:");
		this.getLeft().dumpTree(childIndent, pStream);
		pStream.println(indent + this.toString() + "\t\tRIGHT:");
		this.getRight().dumpTree(childIndent, pStream);
	}
	*/

	public void ReturnStmt.dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  this.getRetExp());
	}

	public void MethodSig.dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  this.getName());
			String childIndent = indent + "  ";
		for(int i = 0; i < getNumChild(); i++)
			getChildNoTransform(i).dumpTree(childIndent, pStream);
	}

	public void InterfaceDecl.dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  this.getName());
			String childIndent = indent + "  ";
		for(int i = 0; i < getNumChild(); i++)
			getChildNoTransform(i).dumpTree(childIndent, pStream);
	}


	public void MinusExp.dumpTree(String indent, java.io.PrintStream pStream) {
		pStream.print("( - ");
		this.getOperand().dumpTree(indent,pStream);
		pStream.print(" ) ");
	}


	public void MultMultExp.dumpTree(String indent, java.io.PrintStream pStream) {
		pStream.print("(");
		this.getLeft().dumpTree(indent,pStream);
		pStream.print(" * ");
		this.getRight().dumpTree(indent,pStream);
		pStream.print(")");
	}


	public void DivMultExp.dumpTree(String indent, java.io.PrintStream pStream) {
		pStream.print("(");
		this.getLeft().dumpTree(indent,pStream);
		pStream.print(" / ");
		this.getRight().dumpTree(indent,pStream);
		pStream.print(")");
	}

	public void ModMultExp.dumpTree(String indent, java.io.PrintStream pStream) {
		pStream.print("(");
		this.getLeft().dumpTree(indent,pStream);
		pStream.print(" % ");
		this.getRight().dumpTree(indent,pStream);
		pStream.print(")");
	}

	public void AddExp.dumpTree(String indent, java.io.PrintStream pStream) {
		pStream.print("AddExp:");
	}

	public void AddAddExp.dumpTree(String indent, java.io.PrintStream pStream) {
		//		super.dumpTree(indent, pStream);
		pStream.print("(");
		this.getLeft().dumpTree(indent,pStream);
		pStream.print("  + ");
		this.getRight().dumpTree(indent,pStream);
		pStream.print(")");
	}

	public void SubAddExp.dumpTree(String indent, java.io.PrintStream pStream) {
		pStream.print("(");
		this.getLeft().dumpTree(indent,pStream);
		pStream.print("  - ");
		this.getRight().dumpTree(indent,pStream);
		pStream.print(")");
	}

	public void IntLiteral.dumpTree(String indent, java.io.PrintStream pStream) {
		pStream.print(" " + this.getContent() + " ");
	}

	public void StringLiteral.dumpTree(String indent, java.io.PrintStream pStream) {
		pStream.print("StrLit: " + this.getContent() + " ");
	}

	public void Decl.dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  this.getName());
			String childIndent = indent + "  ";
		for(int i = 0; i < getNumChild(); i++)
			getChildNoTransform(i).dumpTree(childIndent, pStream);
	}



	// public void Block.dumpTree(String indent, java.io.PrintStream pStream) {
	// pStream.println(indent + "BLOCK" + " " +  this.getClass());
	// pStream.println(indent + getNumChild());
	// pStream.println(children);

	//  }



}  
