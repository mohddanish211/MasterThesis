import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.mtvl.Types;

/**
Checks type errors, and if all variables are properly declared.
 **/


aspect ErrorCheck {
    // need to update "repeated" info of variables and features and compile lazy attributes
    // ints(); bools(); features();


    // checks:
    //  - if the feature name is repeated 
    //  - for type errors of the constraints.
    public void FeatureDecl.collectErrors(SemanticConditionList c) {  
        super.collectErrors(c);
        // check if repeated feature
        if (isRepeated)
            c.add(new SemanticError(this,ErrorMessage.DUPLICATE_FEATURE,getName()));
        AttrConstraints acl = getAttrConstraints();
        // check if it typechecks
        for(int i = 0; i < acl.getNumConstr(); i++)
            acl.getConstr(i).checkType(Types.BOOL,c);
        // mark as a (non-)leaf
        if (hasGroup())
            getNonLeafs().add(getName());
    }
    public void FExt.collectErrors(SemanticConditionList c) {
        super.collectErrors(c);
        if (!((Model)calcContextNode(Model.class)).features().contains(getName()))
            c.add(new SemanticError(this,ErrorMessage.UNDECLARED_VARIABLE,getName()));
        AttrConstraints acl = getAttrConstraints();
        for(int i = 0; i < acl.getNumConstr(); i++)
            acl.getConstr(i).checkType(Types.BOOL,c);
        // check leafs
        if (hasGroup()) {
            Set<String> nonLeafs = getNonLeafs();
            if (nonLeafs.contains(getName())) {
                c.add(new SemanticError(this,ErrorMessage.NOT_A_LEAF,getName()));
            }
        }
    }   
    public void ASTNode.checkType(Types type, SemanticConditionList c) {
        //    System.out.println("spreading check in constraint from...");
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).checkType(type,c);
    }

    // check if variable is already defined, and its type is well-formed.
    public void Attribute.collectErrors(SemanticConditionList c) {
        super.collectErrors(c);
        if (isRepeated) {
            c.add(new SemanticError(this, ErrorMessage.DUPLICATE_VARIABLE, pname()+"."+getName()));
        }
        this.getAType().collectErrors(c);
    }

    public void UnresolvedMType.collectErrors(SemanticConditionList c) {
        c.add(new SemanticError(this, ErrorMessage.UNKNOWN_ATTRIBUTE_TYPE,
                this.getTypename()));
    }
    public void BoolMType.collectErrors(SemanticConditionList c) {
        if (!(this.getTypename().equals("Bool"))) {
            c.add(new SemanticError(this, ErrorMessage.UNEXPECTED_ATTRIBUTE_TYPE,
                    this.getTypename(), "Bool"));
        }
    }
    public void StringMType.collectErrors(SemanticConditionList c) {
        if (!(this.getTypename().equals("String"))) {
            c.add(new SemanticError(this, ErrorMessage.UNEXPECTED_ATTRIBUTE_TYPE,
                    this.getTypename(), "String"));
        }
    }
    public void IntMType.collectErrors(SemanticConditionList c) {
        if (!(this.getTypename().equals("Int"))) {
            c.add(new SemanticError(this, ErrorMessage.UNEXPECTED_ATTRIBUTE_TYPE,
                    this.getTypename(), "Int"));
        }
    }
    public void IntListMType.collectErrors(SemanticConditionList c) {
        if (!(this.getTypename().equals("Int"))) {
            c.add(new SemanticError(this, ErrorMessage.UNEXPECTED_ATTRIBUTE_TYPE,
                    this.getTypename(), "Int"));
        }
    }


    // type of negation
    public void MNegExp.checkType(Types type,SemanticConditionList c) {
        super.checkType(Types.BOOL,c);
        //getOperand().checkType(Types.BOOL,c);
        if (type != Types.BOOL)
            c.add(new SemanticError(this,ErrorMessage.EXPECTED_BOOL,"NEGATION"));
    }
    // type of negative sign
    public void MMinusExp.checkType(Types type,SemanticConditionList c) {
        super.checkType(Types.INT,c);
        if (type != Types.INT)
            c.add(new SemanticError(this,ErrorMessage.EXPECTED_INT,"NEGATIVE"));
    }
    // check type of values
    public void IntVal.checkType(Types type,SemanticConditionList c) {
        if (type != Types.INT)
            c.add(new SemanticError(this,ErrorMessage.EXPECTED_INT,""+getValue()));
    }
    public void BoolVal.checkType(Types type,SemanticConditionList c) {
        if (type != Types.BOOL)
            c.add(new SemanticError(this,ErrorMessage.EXPECTED_BOOL,""+getValue()));
    }
    // check type of boolean operators
    public void MBoolExp.checkType(Types type, SemanticConditionList c) {
        super.checkType(Types.BOOL,c);
        if (type != Types.BOOL)
            c.add(new SemanticError(this,ErrorMessage.EXPECTED_BOOL,toString()));
    }
    // check type of int relations
    public void MRelationalExpr.checkType(Types type, SemanticConditionList c) {
        super.checkType(Types.INT,c);
        if (type != Types.BOOL)
            c.add(new SemanticError(this,ErrorMessage.EXPECTED_BOOL,toString()));
    }
    // check type of equality operators (assuming boolean or int)
    public boolean MEqualityExpr.isInt  = false;
    public boolean MEqualityExpr.isBool = false;
    public void MEqualityExpr.checkType(Types type, SemanticConditionList c) {
        SemanticConditionList lint  = new SemanticConditionList();
        SemanticConditionList lbool = new SemanticConditionList();
        // TODO: use getLeft().isIntType() instead if possible
        getLeft().checkType(Types.INT,lint);
        if (!lint.containsErrors()) {
            isInt = true;
            getRight().checkType(Types.INT,c);
        }
        else {
            isBool = true;
            getLeft().checkType(Types.BOOL,c);
            getRight().checkType(Types.BOOL,c);
        }
    }
    //check type of arithmetic expressions
    public void MArithmeticExpr.checkType(Types type, SemanticConditionList c) {
        super.checkType(Types.INT,c);
        if (type != Types.INT)
            c.add(new SemanticError(this,ErrorMessage.EXPECTED_INT,toString()));
    }

    // type of variables
    public void Variable.checkType(Types type, SemanticConditionList c) {
        if (!isBool() && !isInt()) {
            c.add(new SemanticError(this,ErrorMessage.UNDECLARED_VARIABLE,getFullName()));
        }
        else if(isBool() && type!=Types.BOOL) 
            c.add(new SemanticError(this,ErrorMessage.EXPECTED_BOOL,getFullName()));
        else if(isInt() && type!=Types.INT) 
            c.add(new SemanticError(this,ErrorMessage.EXPECTED_INT,getFullName()));
    }

}
// Local Variables:
// mode: java
// End:
