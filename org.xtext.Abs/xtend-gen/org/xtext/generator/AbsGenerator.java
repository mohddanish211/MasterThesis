/**
 * generated by Xtext 2.13.0
 */
package org.xtext.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import myPack.CustomReferenceFinder;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.findReferences.IReferenceFinder;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.resource.IReferenceDescription;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.xtext.abs.AppAnd_exp;
import org.xtext.abs.AppOr_exp;
import org.xtext.abs.Application_condition;
import org.xtext.abs.Delta_clause;
import org.xtext.abs.Delta_decl;
import org.xtext.abs.Feature_decl;
import org.xtext.abs.When_condition;
import org.xtext.abs.impl.Compilation_UnitImpl;
import org.xtext.abs.impl.Delta_clauseImpl;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AbsGenerator extends AbstractGenerator {
  @Inject
  private IReferenceFinder referenceFinder;
  
  @Inject
  private CustomReferenceFinder customReferenceFinder;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }
  
  /**
   * def compile(Delta_decl e) {
   * var StringBuffer featureNames = new StringBuffer;
   * for(EObject o: e.eContainer.eAllContents.toIterable.filter(Productline_decl)){
   * println("------xx Delta TO Feature xx-----");
   * for(Delta_clause delta_clause: o.eAllContents.toIterable.filter(Delta_clause)){
   * featureNames.setLength(0);
   * try{
   * if((delta_clause.deltaspec.name).equals(e.name)){
   * if((delta_clause.when_condition.application_condition)!==null){
   * resolveApplicationCondition(delta_clause.when_condition.application_condition,featureNames);
   * }
   * println(delta_clause.deltaspec.name+"----->"+featureNames);
   * return featureNames.toString
   * }
   * }catch(Exception err){
   * println(err.toString);
   * }
   * }
   * }
   * return "error"
   * }
   */
  public ArrayList<Object> computeDeltaToFeature(final Delta_decl deltaDecl) {
    ArrayList<Object> featureDeclList = new ArrayList<Object>();
    InputOutput.<String>println("_____________________________________________");
    List<IReferenceDescription> _findReferencesTo = this.customReferenceFinder.findReferencesTo(deltaDecl);
    for (final IReferenceDescription r : _findReferencesTo) {
      {
        final URI sourcePlatformUri = r.getSourceEObjectUri();
        final EObject productlineDecl = this.customReferenceFinder.customResourceFinder(sourcePlatformUri, deltaDecl);
        InputOutput.<String>println("Productline decl..........");
        InputOutput.<EList<EObject>>println(productlineDecl.eContents());
        Iterable<Delta_clauseImpl> _filter = Iterables.<Delta_clauseImpl>filter(productlineDecl.eContents(), Delta_clauseImpl.class);
        for (final EObject delta_clause : _filter) {
          {
            final Delta_clauseImpl clause = ((Delta_clauseImpl) delta_clause);
            InputOutput.<When_condition>println(clause.getWhen_condition());
            try {
              boolean _equals = clause.getDeltaspec().getName().equals(deltaDecl.getName());
              if (_equals) {
                Application_condition _application_condition = clause.getWhen_condition().getApplication_condition();
                boolean _tripleNotEquals = (_application_condition != null);
                if (_tripleNotEquals) {
                  this.resolveApplicationConditionForD2F(clause.getWhen_condition().getApplication_condition(), featureDeclList);
                }
                String _name = clause.getDeltaspec().getName();
                String _plus = (_name + "----->");
                String _plus_1 = (_plus + featureDeclList);
                InputOutput.<String>println(_plus_1);
                return featureDeclList;
              }
            } catch (final Throwable _t) {
              if (_t instanceof Exception) {
                final Exception err = (Exception)_t;
                InputOutput.<String>println(err.toString());
              } else {
                throw Exceptions.sneakyThrow(_t);
              }
            }
          }
        }
      }
    }
    InputOutput.<String>println("_____________________________________________");
    return featureDeclList;
  }
  
  public ArrayList<Object> computeFeatureToDelta(final Feature_decl feature_decl) {
    final ArrayList<Object> deltaDeclList = new ArrayList<Object>();
    List<IReferenceDescription> _findReferencesTo = this.customReferenceFinder.findReferencesTo(feature_decl);
    for (final IReferenceDescription r : _findReferencesTo) {
      {
        final URI sourcePlatformUri = r.getSourceEObjectUri();
        EObject _customResourceFinder = this.customReferenceFinder.customResourceFinder(sourcePlatformUri, feature_decl);
        final Compilation_UnitImpl compilationUnit = ((Compilation_UnitImpl) _customResourceFinder);
        InputOutput.<String>println("------++++++++++++++++++++++++++++++++++++++++_------------");
        InputOutput.println();
        InputOutput.println();
        EList<Delta_clause> _delta_clause = compilationUnit.getProductline_decl().getDelta_clause();
        for (final Delta_clause clause : _delta_clause) {
          try {
            Application_condition _application_condition = clause.getWhen_condition().getApplication_condition();
            boolean _tripleNotEquals = (_application_condition != null);
            if (_tripleNotEquals) {
              this.resolveApplicationConditionForF2D(clause.getWhen_condition().getApplication_condition(), feature_decl, deltaDeclList, clause);
            }
          } catch (final Throwable _t) {
            if (_t instanceof Exception) {
              final Exception err = (Exception)_t;
              InputOutput.<String>println(err.toString());
            } else {
              throw Exceptions.sneakyThrow(_t);
            }
          }
        }
        return deltaDeclList;
      }
    }
    return null;
  }
  
  public Object resolveApplicationConditionForF2D(final Application_condition app_cond, final Feature_decl featureDecl, final ArrayList<Object> deltaDeclList, final Delta_clause deltaClause) {
    Object _xtrycatchfinallyexpression = null;
    try {
      Object _xifexpression = null;
      if ((app_cond instanceof AppOr_exp)) {
        Object _xblockexpression = null;
        {
          this.resolveApplicationConditionForF2D(((AppOr_exp)app_cond).getLeft(), featureDecl, deltaDeclList, deltaClause);
          _xblockexpression = this.resolveApplicationConditionForF2D(((AppOr_exp)app_cond).getRight(), featureDecl, deltaDeclList, deltaClause);
        }
        _xifexpression = _xblockexpression;
      } else {
        Object _xifexpression_1 = null;
        if ((app_cond instanceof AppAnd_exp)) {
          Object _xblockexpression_1 = null;
          {
            this.resolveApplicationConditionForF2D(((AppAnd_exp)app_cond).getLeft(), featureDecl, deltaDeclList, deltaClause);
            _xblockexpression_1 = this.resolveApplicationConditionForF2D(((AppAnd_exp)app_cond).getRight(), featureDecl, deltaDeclList, deltaClause);
          }
          _xifexpression_1 = _xblockexpression_1;
        } else {
          EList<Feature_decl> _feature = app_cond.getFeature();
          boolean _tripleNotEquals = (_feature != null);
          if (_tripleNotEquals) {
            EList<Feature_decl> _feature_1 = app_cond.getFeature();
            for (final EObject featureObj : _feature_1) {
              boolean _equals = featureObj.eGet(featureObj.eClass().getEStructuralFeature("name")).equals(featureDecl.getName());
              if (_equals) {
                InputOutput.<String>println("Adding to Delta List");
                InputOutput.<Delta_decl>println(deltaClause.getDeltaspec());
                deltaDeclList.add(deltaClause.getDeltaspec());
              }
            }
          }
        }
        _xifexpression = _xifexpression_1;
      }
      _xtrycatchfinallyexpression = _xifexpression;
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        _xtrycatchfinallyexpression = InputOutput.<String>println(e.toString());
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    return _xtrycatchfinallyexpression;
  }
  
  public Object resolveApplicationConditionForD2F(final Application_condition app_cond, final ArrayList<Object> featureDecl) {
    Object _xtrycatchfinallyexpression = null;
    try {
      Object _xblockexpression = null;
      {
        InputOutput.<String>println("Application condition");
        InputOutput.<Application_condition>println(app_cond);
        InputOutput.<String>println("--------------------------------------------");
        Object _xifexpression = null;
        if ((app_cond instanceof AppOr_exp)) {
          Object _xblockexpression_1 = null;
          {
            this.resolveApplicationConditionForD2F(((AppOr_exp)app_cond).getLeft(), featureDecl);
            _xblockexpression_1 = this.resolveApplicationConditionForD2F(((AppOr_exp)app_cond).getRight(), featureDecl);
          }
          _xifexpression = _xblockexpression_1;
        } else {
          Object _xifexpression_1 = null;
          if ((app_cond instanceof AppAnd_exp)) {
            Object _xblockexpression_2 = null;
            {
              this.resolveApplicationConditionForD2F(((AppAnd_exp)app_cond).getLeft(), featureDecl);
              _xblockexpression_2 = this.resolveApplicationConditionForD2F(((AppAnd_exp)app_cond).getRight(), featureDecl);
            }
            _xifexpression_1 = _xblockexpression_2;
          } else {
            boolean _xifexpression_2 = false;
            EList<Feature_decl> _feature = app_cond.getFeature();
            boolean _tripleNotEquals = (_feature != null);
            if (_tripleNotEquals) {
              _xifexpression_2 = featureDecl.add(app_cond.getFeature());
            }
            _xifexpression_1 = Boolean.valueOf(_xifexpression_2);
          }
          _xifexpression = _xifexpression_1;
        }
        _xblockexpression = _xifexpression;
      }
      _xtrycatchfinallyexpression = _xblockexpression;
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        _xtrycatchfinallyexpression = InputOutput.<String>println(e.toString());
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    return _xtrycatchfinallyexpression;
  }
}
