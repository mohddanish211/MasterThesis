/**
 * generated by Xtext 2.13.0
 */
package org.xtext.abs.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.abs.AbsPackage;
import org.xtext.abs.Delta_param;
import org.xtext.abs.Has_condition;
import org.xtext.abs.Param_decl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Delta param</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.abs.impl.Delta_paramImpl#getParam_decl <em>Param decl</em>}</li>
 *   <li>{@link org.xtext.abs.impl.Delta_paramImpl#getHas_condition <em>Has condition</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class Delta_paramImpl extends MinimalEObjectImpl.Container implements Delta_param
{
  /**
   * The cached value of the '{@link #getParam_decl() <em>Param decl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParam_decl()
   * @generated
   * @ordered
   */
  protected Param_decl param_decl;

  /**
   * The cached value of the '{@link #getHas_condition() <em>Has condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHas_condition()
   * @generated
   * @ordered
   */
  protected Has_condition has_condition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Delta_paramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AbsPackage.Literals.DELTA_PARAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Param_decl getParam_decl()
  {
    return param_decl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParam_decl(Param_decl newParam_decl, NotificationChain msgs)
  {
    Param_decl oldParam_decl = param_decl;
    param_decl = newParam_decl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AbsPackage.DELTA_PARAM__PARAM_DECL, oldParam_decl, newParam_decl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParam_decl(Param_decl newParam_decl)
  {
    if (newParam_decl != param_decl)
    {
      NotificationChain msgs = null;
      if (param_decl != null)
        msgs = ((InternalEObject)param_decl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AbsPackage.DELTA_PARAM__PARAM_DECL, null, msgs);
      if (newParam_decl != null)
        msgs = ((InternalEObject)newParam_decl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AbsPackage.DELTA_PARAM__PARAM_DECL, null, msgs);
      msgs = basicSetParam_decl(newParam_decl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AbsPackage.DELTA_PARAM__PARAM_DECL, newParam_decl, newParam_decl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Has_condition getHas_condition()
  {
    return has_condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHas_condition(Has_condition newHas_condition, NotificationChain msgs)
  {
    Has_condition oldHas_condition = has_condition;
    has_condition = newHas_condition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AbsPackage.DELTA_PARAM__HAS_CONDITION, oldHas_condition, newHas_condition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHas_condition(Has_condition newHas_condition)
  {
    if (newHas_condition != has_condition)
    {
      NotificationChain msgs = null;
      if (has_condition != null)
        msgs = ((InternalEObject)has_condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AbsPackage.DELTA_PARAM__HAS_CONDITION, null, msgs);
      if (newHas_condition != null)
        msgs = ((InternalEObject)newHas_condition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AbsPackage.DELTA_PARAM__HAS_CONDITION, null, msgs);
      msgs = basicSetHas_condition(newHas_condition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AbsPackage.DELTA_PARAM__HAS_CONDITION, newHas_condition, newHas_condition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AbsPackage.DELTA_PARAM__PARAM_DECL:
        return basicSetParam_decl(null, msgs);
      case AbsPackage.DELTA_PARAM__HAS_CONDITION:
        return basicSetHas_condition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AbsPackage.DELTA_PARAM__PARAM_DECL:
        return getParam_decl();
      case AbsPackage.DELTA_PARAM__HAS_CONDITION:
        return getHas_condition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AbsPackage.DELTA_PARAM__PARAM_DECL:
        setParam_decl((Param_decl)newValue);
        return;
      case AbsPackage.DELTA_PARAM__HAS_CONDITION:
        setHas_condition((Has_condition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AbsPackage.DELTA_PARAM__PARAM_DECL:
        setParam_decl((Param_decl)null);
        return;
      case AbsPackage.DELTA_PARAM__HAS_CONDITION:
        setHas_condition((Has_condition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AbsPackage.DELTA_PARAM__PARAM_DECL:
        return param_decl != null;
      case AbsPackage.DELTA_PARAM__HAS_CONDITION:
        return has_condition != null;
    }
    return super.eIsSet(featureID);
  }

} //Delta_paramImpl
