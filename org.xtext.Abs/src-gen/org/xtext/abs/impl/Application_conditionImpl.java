/**
 * generated by Xtext 2.13.0
 */
package org.xtext.abs.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.abs.AbsPackage;
import org.xtext.abs.Application_condition;
import org.xtext.abs.Feature;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Application condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.abs.impl.Application_conditionImpl#getApp_cond <em>App cond</em>}</li>
 *   <li>{@link org.xtext.abs.impl.Application_conditionImpl#getFeature <em>Feature</em>}</li>
 *   <li>{@link org.xtext.abs.impl.Application_conditionImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link org.xtext.abs.impl.Application_conditionImpl#getRight <em>Right</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class Application_conditionImpl extends MinimalEObjectImpl.Container implements Application_condition
{
  /**
   * The cached value of the '{@link #getApp_cond() <em>App cond</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getApp_cond()
   * @generated
   * @ordered
   */
  protected Application_condition app_cond;

  /**
   * The cached value of the '{@link #getFeature() <em>Feature</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeature()
   * @generated
   * @ordered
   */
  protected Feature feature;

  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected Application_condition left;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected Application_condition right;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Application_conditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AbsPackage.Literals.APPLICATION_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Application_condition getApp_cond()
  {
    return app_cond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetApp_cond(Application_condition newApp_cond, NotificationChain msgs)
  {
    Application_condition oldApp_cond = app_cond;
    app_cond = newApp_cond;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AbsPackage.APPLICATION_CONDITION__APP_COND, oldApp_cond, newApp_cond);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setApp_cond(Application_condition newApp_cond)
  {
    if (newApp_cond != app_cond)
    {
      NotificationChain msgs = null;
      if (app_cond != null)
        msgs = ((InternalEObject)app_cond).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AbsPackage.APPLICATION_CONDITION__APP_COND, null, msgs);
      if (newApp_cond != null)
        msgs = ((InternalEObject)newApp_cond).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AbsPackage.APPLICATION_CONDITION__APP_COND, null, msgs);
      msgs = basicSetApp_cond(newApp_cond, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AbsPackage.APPLICATION_CONDITION__APP_COND, newApp_cond, newApp_cond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Feature getFeature()
  {
    if (feature != null && feature.eIsProxy())
    {
      InternalEObject oldFeature = (InternalEObject)feature;
      feature = (Feature)eResolveProxy(oldFeature);
      if (feature != oldFeature)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AbsPackage.APPLICATION_CONDITION__FEATURE, oldFeature, feature));
      }
    }
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Feature basicGetFeature()
  {
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFeature(Feature newFeature)
  {
    Feature oldFeature = feature;
    feature = newFeature;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AbsPackage.APPLICATION_CONDITION__FEATURE, oldFeature, feature));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Application_condition getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(Application_condition newLeft, NotificationChain msgs)
  {
    Application_condition oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AbsPackage.APPLICATION_CONDITION__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft(Application_condition newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AbsPackage.APPLICATION_CONDITION__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AbsPackage.APPLICATION_CONDITION__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AbsPackage.APPLICATION_CONDITION__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Application_condition getRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight(Application_condition newRight, NotificationChain msgs)
  {
    Application_condition oldRight = right;
    right = newRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AbsPackage.APPLICATION_CONDITION__RIGHT, oldRight, newRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight(Application_condition newRight)
  {
    if (newRight != right)
    {
      NotificationChain msgs = null;
      if (right != null)
        msgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AbsPackage.APPLICATION_CONDITION__RIGHT, null, msgs);
      if (newRight != null)
        msgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AbsPackage.APPLICATION_CONDITION__RIGHT, null, msgs);
      msgs = basicSetRight(newRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AbsPackage.APPLICATION_CONDITION__RIGHT, newRight, newRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AbsPackage.APPLICATION_CONDITION__APP_COND:
        return basicSetApp_cond(null, msgs);
      case AbsPackage.APPLICATION_CONDITION__LEFT:
        return basicSetLeft(null, msgs);
      case AbsPackage.APPLICATION_CONDITION__RIGHT:
        return basicSetRight(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AbsPackage.APPLICATION_CONDITION__APP_COND:
        return getApp_cond();
      case AbsPackage.APPLICATION_CONDITION__FEATURE:
        if (resolve) return getFeature();
        return basicGetFeature();
      case AbsPackage.APPLICATION_CONDITION__LEFT:
        return getLeft();
      case AbsPackage.APPLICATION_CONDITION__RIGHT:
        return getRight();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AbsPackage.APPLICATION_CONDITION__APP_COND:
        setApp_cond((Application_condition)newValue);
        return;
      case AbsPackage.APPLICATION_CONDITION__FEATURE:
        setFeature((Feature)newValue);
        return;
      case AbsPackage.APPLICATION_CONDITION__LEFT:
        setLeft((Application_condition)newValue);
        return;
      case AbsPackage.APPLICATION_CONDITION__RIGHT:
        setRight((Application_condition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AbsPackage.APPLICATION_CONDITION__APP_COND:
        setApp_cond((Application_condition)null);
        return;
      case AbsPackage.APPLICATION_CONDITION__FEATURE:
        setFeature((Feature)null);
        return;
      case AbsPackage.APPLICATION_CONDITION__LEFT:
        setLeft((Application_condition)null);
        return;
      case AbsPackage.APPLICATION_CONDITION__RIGHT:
        setRight((Application_condition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AbsPackage.APPLICATION_CONDITION__APP_COND:
        return app_cond != null;
      case AbsPackage.APPLICATION_CONDITION__FEATURE:
        return feature != null;
      case AbsPackage.APPLICATION_CONDITION__LEFT:
        return left != null;
      case AbsPackage.APPLICATION_CONDITION__RIGHT:
        return right != null;
    }
    return super.eIsSet(featureID);
  }

} //Application_conditionImpl
