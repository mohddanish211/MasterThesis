/*
* generated by Xtext 2.13.0
*/
package org.xtext.generator
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.abs.Delta_clause
import org.xtext.abs.Application_condition
import org.xtext.abs.AppOr_exp
import org.xtext.abs.AppAnd_exp
import org.xtext.abs.Delta_decl
import org.eclipse.emf.ecore.EObject
import org.xtext.abs.Feature_decl
import java.util.ArrayList
import org.xtext.abs.impl.Compilation_UnitImpl
import com.google.inject.Inject
import myPack.CustomReferenceFinder
import org.eclipse.xtext.resource.IReferenceDescription
import org.xtext.abs.impl.Delta_clauseImpl
import org.eclipse.emf.common.CommonPlugin
import org.eclipse.xtext.resource.XtextResource
import org.eclipse.emf.common.util.URI
import org.eclipse.core.runtime.IPath
import org.eclipse.core.runtime.Path
import org.xtext.abs.Feature

/**
* Generates code from your model files on save.
* 
* See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
*/
class AbsGenerator extends AbstractGenerator {
	
	@Inject
	private CustomReferenceFinder customReferenceFinder;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	  /*compile();
	  println(resource.resourceSet.resources.get(0))
	  val xtextResource= resource as XtextResource
	  val resolvedFile = CommonPlugin.resolve(xtextResource.getURI());
				val path= new Path(resolvedFile.toFileString());
				//val myFile=ResourcesPlugin.getWorkspace().getRoot().getFile(path);//getFile(new Path(resolvedFile.toFileString()));
				System.out.println(path);
				println(resolvedFile.toFileString());
				
	  new abs.frontend.parser.Main().mainMethod(resolvedFile.toFileString());*/
	}
	
	def void compile(){
	
	}

 

//Delta to Feature Visualization.

/* 	def compile(Delta_decl e) {
var StringBuffer featureNames = new StringBuffer;
for(EObject o: e.eContainer.eAllContents.toIterable.filter(Productline_decl)){
    println("------xx Delta TO Feature xx-----");
    for(Delta_clause delta_clause: o.eAllContents.toIterable.filter(Delta_clause)){
    featureNames.setLength(0);
    try{
        if((delta_clause.deltaspec.name).equals(e.name)){
            if((delta_clause.when_condition.application_condition)!==null){
            resolveApplicationCondition(delta_clause.when_condition.application_condition,featureNames);
                }
            println(delta_clause.deltaspec.name+"----->"+featureNames);
            return featureNames.toString
            }
        }catch(Exception err){
        println(err.toString);
        }
    }
}
return "error"
}*/

// Delta to Feature Visualization
def computeDeltaToFeature(Delta_decl deltaDecl) {
var ArrayList<Object> featureDeclList = new ArrayList<Object>();
println("_____________________________________________");
//println(deltaDecl.eContainer);
for(IReferenceDescription r: customReferenceFinder.findReferencesTo(deltaDecl)){
	val sourcePlatformUri = r.sourceEObjectUri; 
	val productlineDecl=customReferenceFinder.customResourceFinder(sourcePlatformUri,deltaDecl);
	println("Productline decl..........")
	println(productlineDecl.eContents)	
	for(EObject delta_clause: productlineDecl.eContents.filter(Delta_clauseImpl)){
		val clause=delta_clause as Delta_clauseImpl;
		println(clause.when_condition);
		try{
        if((clause.deltaspec.name).equals(deltaDecl.name)){
        	featureDeclList.clear
            if((clause.when_condition.application_condition)!==null){
            resolveApplicationConditionForD2F(clause.when_condition.application_condition,featureDeclList);
                }
            println(clause.deltaspec.name+"----->"+featureDeclList.size);
            
            return featureDeclList;
            }
        }catch(Exception err){
        println(err.toString);
        }
		
	}
}
println("_____________________________________________");

return featureDeclList
}	


//Feature to Delta Visualization
def computeFeatureToDelta(Feature_decl feature_decl) {
	
val ArrayList<Object> deltaDeclList = new ArrayList<Object>();
for(IReferenceDescription r: customReferenceFinder.findReferencesTo(feature_decl)){
	val sourcePlatformUri = r.sourceEObjectUri; 
	val compilationUnit =customReferenceFinder.customResourceFinder(sourcePlatformUri,feature_decl) as Compilation_UnitImpl;	
	println("------++++++++++++++++++++++++++++++++++++++++_------------")
	println(compilationUnit);
	println(compilationUnit.productline_decl)
	println(compilationUnit.productline_decl.delta_clause)
	for(Delta_clause clause: compilationUnit.productline_decl.delta_clause){
		try{
		 	if((clause.when_condition.application_condition)!==null){
		 		println(clause.when_condition.application_condition);
		      	resolveApplicationConditionForF2D(clause.when_condition.application_condition,feature_decl,deltaDeclList,clause);
		      	}	
			}catch(Exception err){
		    	println(err.toString);
		}		
	}
	return deltaDeclList;
}
	
}	




// Feature to Delta F2D
// Resolve Application Condition for feature to delta

def resolveApplicationConditionForF2D(Application_condition app_cond,Feature_decl featureDecl,ArrayList<Object> deltaDeclList,Delta_clause deltaClause){
try{
    if(app_cond instanceof AppOr_exp){
        resolveApplicationConditionForF2D(app_cond.left,featureDecl,deltaDeclList,deltaClause);
        resolveApplicationConditionForF2D(app_cond.right,featureDecl,deltaDeclList,deltaClause);
    }else if(app_cond instanceof AppAnd_exp){
        resolveApplicationConditionForF2D(app_cond.left,featureDecl,deltaDeclList,deltaClause);
        resolveApplicationConditionForF2D(app_cond.right,featureDecl,deltaDeclList,deltaClause);
    }else{
        if(app_cond.feature!== null){
        	    val featureObj=  app_cond.feature.feature_decl as EObject;
        		if((featureObj.eGet(featureObj.eClass.getEStructuralFeature("name"))).equals(featureDecl.name)){
        			println("Adding to Delta List")
        			println(deltaClause.deltaspec)
        			deltaDeclList.add(deltaClause.deltaspec);
        		}
        	
          }
     }
        
  }catch(Exception e){
    println(e.toString());
  }
} 

// Delta to Feature D2F
// Resolve Application Condition for delta to feature

def resolveApplicationConditionForD2F(Application_condition app_cond,ArrayList<Object> featureDecl){
try{
    
	println("Application condition");
	println(app_cond);
	println("--------------------------------------------");
    if(app_cond instanceof AppOr_exp){
        resolveApplicationConditionForD2F(app_cond.left,featureDecl);
        resolveApplicationConditionForD2F(app_cond.right,featureDecl);
    }else if(app_cond instanceof AppAnd_exp){
        resolveApplicationConditionForD2F(app_cond.left,featureDecl);
        resolveApplicationConditionForD2F(app_cond.right,featureDecl);
    }else{
        if(app_cond.feature!== null){	
            featureDecl.add(app_cond.feature);
        }
        
  	  }
	}catch(Exception e){
    println(e.toString());
	}
}

}