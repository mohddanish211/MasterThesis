/*
* generated by Xtext 2.13.0
*/
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.abs.Productline_decl
import org.xtext.abs.Delta_clause
import org.xtext.abs.Application_condition
import org.xtext.abs.AppOr_exp
import org.xtext.abs.AppAnd_exp
//import com.google.inject.Inject;
import org.xtext.abs.Delta_decl
import org.eclipse.emf.ecore.EObject
//import org.xtext.abs.Product_decl
import org.xtext.abs.Feature_decl
import org.xtext.abs.Feature
import java.util.ArrayList
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.emf.ecore.EStructuralFeature

/**
* Generates code from your model files on save.
* 
* See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
*/
class AbsGenerator extends AbstractGenerator {
override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))

/* 	for (EObject content : resource.getContents()) {
    println("content.eCrossReferences");
    
    for(EObject e1 : content.eContents){
        println("content eCrossReferences");
        println(e1);	
    }
}
for (e : resource.allContents.toIterable.filter(Productline_decl)) {
        
    e.compile();
}

*/

}

/* 	def compile(Productline_decl e) {
println(e.name);
var StringBuffer featureNames = new StringBuffer;
for(Delta_clause f: e.delta_clause){
    featureNames.setLength(0);
    try{
        if((f.when_condition.application_condition)!==null){
        resolveApplicationCondition(f.when_condition.application_condition,featureNames);
        }
        //f.deltaspec.name = featureNames.toString
        //print(f.deltaspec.name+"----->"+featureNames);
//				testGeneartorObj.label = featureNames.toString;
        
    }catch(Exception err){
        println(err.toString);
    }
    println();
}
return featureNames;
}*/

//Delta to Feature Visualization.

/* 	def compile(Delta_decl e) {
var StringBuffer featureNames = new StringBuffer;
for(EObject o: e.eContainer.eAllContents.toIterable.filter(Productline_decl)){
    println("------xx Delta TO Feature xx-----");
    for(Delta_clause delta_clause: o.eAllContents.toIterable.filter(Delta_clause)){
    featureNames.setLength(0);
    try{
        if((delta_clause.deltaspec.name).equals(e.name)){
            if((delta_clause.when_condition.application_condition)!==null){
            resolveApplicationCondition(delta_clause.when_condition.application_condition,featureNames);
                }
            println(delta_clause.deltaspec.name+"----->"+featureNames);
            return featureNames.toString
            }
        }catch(Exception err){
        println(err.toString);
        }
    }
}
return "error"
}*/

// Delta to Feature Visualization
def computeDeltaToFeature(Delta_decl deltaDecl) {
var ArrayList<Object> featureDeclList = new ArrayList<Object>();
for(EObject productDeclEObject: deltaDecl.eContainer.eAllContents.toIterable.filter(Productline_decl)){
    println("------xx Delta TO Feature xx-----");
    for(Delta_clause delta_clause: productDeclEObject.eAllContents.toIterable.filter(Delta_clause)){
    try{
        if((delta_clause.deltaspec.name).equals(deltaDecl.name)){
            if((delta_clause.when_condition.application_condition)!==null){
            resolveApplicationConditionForD2F(delta_clause.when_condition.application_condition,featureDeclList);
                }
            println(delta_clause.deltaspec.name+"----->"+featureDeclList);
            return featureDeclList;
            }
        }catch(Exception err){
        println(err.toString);
        }
    }
}
return null
}	


//Feature to Delta Visualization
def computeFeatureToDelta(Feature_decl feature_decl) {
	var ArrayList<Object> deltaDeclList = new ArrayList<Object>();
	for(EObject productDeclEObject: EcoreUtil.getRootContainer(feature_decl).eAllContents.toIterable.filter(Productline_decl)) {
		for(Delta_clause delta_clause: productDeclEObject.eAllContents.toIterable.filter(Delta_clause)){
		    try{
		    	  if((delta_clause.when_condition.application_condition)!==null){
		           resolveApplicationConditionForF2D(delta_clause.when_condition.application_condition,feature_decl,deltaDeclList,delta_clause);
		            }
		        }catch(Exception err){
		        println(err.toString);
		        }
		     }
	}
	println(deltaDeclList);
return deltaDeclList;
}
	




// Feature to Delta F2D
// Resolve Application Condition for feature to delta

def resolveApplicationConditionForF2D(Application_condition app_cond,Feature_decl featureDecl,ArrayList<Object> deltaDeclList,Delta_clause deltaClause){
try{
    if(app_cond instanceof AppOr_exp){
        resolveApplicationConditionForF2D(app_cond.left,featureDecl,deltaDeclList,deltaClause);
        resolveApplicationConditionForF2D(app_cond.right,featureDecl,deltaDeclList,deltaClause);
    }else if(app_cond instanceof AppAnd_exp){
        resolveApplicationConditionForF2D(app_cond.left,featureDecl,deltaDeclList,deltaClause);
        resolveApplicationConditionForF2D(app_cond.right,featureDecl,deltaDeclList,deltaClause);
    }else{
        if(app_cond.feature!== null){
        	for(EObject featureObj: app_cond.feature){
        		if((featureObj.eGet(featureObj.eClass.getEStructuralFeature("name"))).equals(featureDecl.name)){
        			println("Adding to Delta List")
        			println(deltaClause.deltaspec)
        			deltaDeclList.add(deltaClause.deltaspec);
        		}
        	}
          }
     }
        
  }catch(Exception e){
    println(e.toString());
  }
} 

// Delta to Feature D2F
// Resolve Application Condition for delta to feature

def resolveApplicationConditionForD2F(Application_condition app_cond,ArrayList<Object> featureDecl){
try{
    
	println("Application condition");
	println(app_cond);
	println("--------------------------------------------");
    if(app_cond instanceof AppOr_exp){
        resolveApplicationConditionForD2F(app_cond.left,featureDecl);
        resolveApplicationConditionForD2F(app_cond.right,featureDecl);
    }else if(app_cond instanceof AppAnd_exp){
        resolveApplicationConditionForD2F(app_cond.left,featureDecl);
        resolveApplicationConditionForD2F(app_cond.right,featureDecl);
    }else{
        if(app_cond.feature!== null){	
            featureDecl.add(app_cond.feature);
        }
        
  	  }
	}catch(Exception e){
    println(e.toString());
	}
}

}