/*
 * generated by Xtext 2.13.0
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.abs.Productline_decl
import java.util.List
import org.xtext.abs.Feature
import org.xtext.abs.Delta_clause

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AbsGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))

	for (e : resource.allContents.toIterable.filter(Productline_decl)) {
                
			e.compile();
		}

	}
	
	def compile(Productline_decl e) {
		println(e.name);
		for(Delta_clause f: e.delta_clause){
			print(f.deltaspec.name+"--->");//+f.from_condition.application_condition.feature+f.when_condition.application_condition.feature);
			try{
				if((f.when_condition.application_condition.feature.name).toString!==null){
				print(f.when_condition.application_condition.feature.name);
				}
			}catch(Exception err){
				println(err.toString);
			}
			println();
		}
		
	}
}