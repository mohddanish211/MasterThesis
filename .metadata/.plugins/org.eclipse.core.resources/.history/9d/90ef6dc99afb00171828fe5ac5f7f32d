/*
 * generated by Xtext 2.13.0
 */
grammar DebugInternalAbs;

// Rule Model
ruleModel:
	ruleCompilation_unit
;

// Rule Compilation_unit
ruleCompilation_unit:
	ruleModule_decl
	*
	ruleDelta_decl
	*
	ruleUpdate_decl
	*
	ruleProductline_decl
	?
	ruleProduct_decl
	*
	(
		'root'
		ruleFeature_decl
		    |
		'extension'
		ruleFextension
	)*
;

// Rule Delta_decl
ruleDelta_decl:
	'delta'
	RULE_TYPE_IDENTIFIER
	(
		'('
		ruleDelta_param
		(
			','
			ruleDelta_param
		)*
		')'
	)?
	';'
	ruleDelta_access
	*
	ruleModule_modifier
	*
;

// Rule Delta_param
ruleDelta_param:
	(
		ruleParam_decl
		    |
		RULE_QUALIFIED_TYPE_IDENTIFIER
		ruleHas_condition
	)
;

// Rule Has_condition
ruleHas_condition:
	(
		'hasfield'
		ruleField_decl
		    |
		'hasMethod'
		ruleMethodsig
		    |
		'hasInterface'
		RULE_INTERFACE_NAME
	)
;

// Rule Field_decl
ruleField_decl:
	ruleAnnotation
	ruleType_use
	RULE_IDENTIFIER
	(
		'='
		rulePure_exp
	)?
	';'
;

// Rule Delta_access
ruleDelta_access:
	'uses'
	RULE_QUALIFIED_TYPE_IDENTIFIER
	';'
;

// Rule Module_modifier
ruleModule_modifier:
	(
		ruleFunctional_modifier
		    |
		ruleOO_modifier
		    |
		ruleNamespace_modifier
	)
;

// Rule Functional_modifier
ruleFunctional_modifier:
	(
		'adds'
		ruleFunction_decl
		    |
		'adds'
		ruleDatatype_decl
		    |
		'adds'
		ruleTypesyn_decl
		    |
		'modifies'
		ruleTypesyn_decl
		    |
		'modifies'
		ruleDatatype_decl
	)
;

// Rule OO_modifier
ruleOO_modifier:
	(
		'adds'
		ruleClass_decl
		    |
		'removes'
		'class'
		RULE_QUALIFIED_TYPE_IDENTIFIER
		';'
		    |
		'modifies'
		'class'
		RULE_QUALIFIED_TYPE_IDENTIFIER
		(
			'adds'
			RULE_INTERFACE_NAME
			(
				','
				RULE_INTERFACE_NAME
			)*
		)?
		(
			'removes'
			RULE_INTERFACE_NAME
			(
				','
				RULE_INTERFACE_NAME
			)*
		)?
		'{'
		ruleClass_modifier_fragment
		*
		'}'
		    |
		'adds'
		ruleInterface_decl
		    |
		'removes'
		'interface'
		RULE_QUALIFIED_TYPE_IDENTIFIER
		';'
		    |
		'modifies'
		'interface'
		RULE_QUALIFIED_TYPE_IDENTIFIER
		'{'
		ruleInterface_modifier_fragment
		*
		'}'
	)
;

// Rule Class_modifier_fragment
ruleClass_modifier_fragment:
	(
		'adds'
		ruleField_decl
		    |
		'removes'
		ruleField_decl
		    |
		ruleTrait_oper
	)
;

// Rule Interface_modifier_fragment
ruleInterface_modifier_fragment:
	(
		'adds'
		ruleMethodsig
		    |
		'removes'
		ruleMethodsig
	)
;

// Rule Namespace_modifier
ruleNamespace_modifier:
	(
		'adds'
		ruleModule_import
		    |
		'adds'
		ruleModule_export
	)
;

// Rule Paramlist
ruleParamlist:
	'('
	(
		ruleParam_decl
		(
			','
			ruleParam_decl
		)*
	)?
	')'
;

// Rule Param_decl
ruleParam_decl:
	ruleAnnotation
	*
	ruleType_exp
	RULE_IDENTIFIER
;

// Rule Update_decl
ruleUpdate_decl:
	'stateupdate'
	RULE_TYPE_IDENTIFIER
	';'
	ruleObject_update
	*
;

// Rule Object_update
ruleObject_update:
	'objectupdate'
	RULE_QUALIFIED_TYPE_IDENTIFIER
	'{'
	'await'
	ruleGuard
	';'
	ruleUpdate_preamble_declaration
	*
	ruleObject_update_assign_stmt
	*
	'classupdate'
	';'
	ruleObject_update_assign_stmt
	*
	'}'
;

// Rule Object_update_assign_stmt
ruleObject_update_assign_stmt:
	ruleVar_or_field_ref
	'='
	ruleExp
	';'
;

// Rule Var_or_field_ref
ruleVar_or_field_ref:
	(
		'this'
		'.'
	)?
	RULE_IDENTIFIER
;

// Rule Update_preamble_declaration
ruleUpdate_preamble_declaration:
	ruleType_exp
	RULE_IDENTIFIER
;

// Rule Productline_decl
ruleProductline_decl:
	'productline'
	RULE_TYPE_IDENTIFIER
	';'
	'features'
	ruleFeature
	(
		','
		ruleFeature
	)*
	';'
	ruleDelta_clause
	*
;

// Rule Delta_clause
ruleDelta_clause:
	'delta'
	ruleDeltaspec
	ruleAfter_condition
	?
	ruleFrom_condition
	?
	ruleWhen_condition
	?
	';'
;

// Rule Deltaspec
ruleDeltaspec:
	RULE_TYPE_IDENTIFIER
	(
		'('
		ruleDeltaspec_param
		(
			','
			ruleDeltaspec_param
		)*
		')'
	)?
;

// Rule Deltaspec_param
ruleDeltaspec_param:
	(
		RULE_TYPE_IDENTIFIER
		'.'
		RULE_IDENTIFIER
		    |
		RULE_INTLITERAL
		    |
		RULE_TYPE_IDENTIFIER
	)
;

// Rule After_condition
ruleAfter_condition:
	'after'
	RULE_TYPE_IDENTIFIER
	(
		','
		RULE_TYPE_IDENTIFIER
	)*
;

// Rule From_condition
ruleFrom_condition:
	'from'
	ruleApplication_condition
;

// Rule When_condition
ruleWhen_condition:
	(
		'when'
		    |
		'to'
	)
	ruleApplication_condition
;

// Rule Application_condition
ruleApplication_condition:
	ruleApplicationExpression
	?
;

// Rule ApplicationExpression
ruleApplicationExpression:
	ruleApplicationOrExp
;

// Rule ApplicationOrExp
ruleApplicationOrExp:
	ruleApplicationAndExp
	(
		RULE_OROR
		ruleApplicationOrExp
	)*
;

// Rule ApplicationAndExp
ruleApplicationAndExp:
	ruleApplicationNegationExp
	(
		RULE_ANDAND
		ruleApplicationAndExp
	)*
;

// Rule ApplicationNegationExp
ruleApplicationNegationExp:
	(
		ruleApplicationPrimaryExp
		    |
		(
			RULE_NEGATION
			    |
			RULE_NEGATION_CREOL
		)
		ruleApplicationNegationExp
	)
;

// Rule ApplicationPrimaryExp
ruleApplicationPrimaryExp:
	(
		'('
		ruleApplication_condition
		')'
		    |
		ruleFeature
	)
;

// Rule Product_decl
ruleProduct_decl:
	'product'
	RULE_TYPE_IDENTIFIER
	(
		'('
		(
			ruleFeature
			(
				','
				ruleFeature
			)*
		)?
		')'
		(
			'{'
			ruleProduct_reconfiguration
			*
			'}'
			    |
			';'
		)
		    |
		'='
		ruleProduct_expr
		';'
	)
;

// Rule Feature
ruleFeature:
	RULE_TYPE_IDENTIFIER
	'\''
	?
	'{'
	ruleAttr_assignment
	(
		','
		ruleAttr_assignment
	)?
;

// Rule Attr_assignment
ruleAttr_assignment:
	RULE_TYPE_IDENTIFIER
	'='
	(
		RULE_INTLITERAL
		    |
		RULE_TYPE_IDENTIFIER
		    |
		RULE_STRINGLITERAL
	)
;

// Rule Product_reconfiguration
ruleProduct_reconfiguration:
	RULE_TYPE_IDENTIFIER
	'delta'
	RULE_TYPE_IDENTIFIER
	(
		','
		RULE_TYPE_IDENTIFIER
	)*
	'stateupdate'
	RULE_TYPE_IDENTIFIER
	';'
;

// Rule Product_expr
ruleProduct_expr:
	(
		'{'
		ruleFeature
		(
			','
			ruleFeature
		)*
		'}'
		    |
		RULE_TYPE_IDENTIFIER
		    |
		ruleProductExpression
	)
;

// Rule ProductExpression
ruleProductExpression:
	ruleOrorExp
;

// Rule OrorExp
ruleOrorExp:
	ruleAndExp
	(
		RULE_OROR
		ruleAndExp
	)*
;

// Rule AndExp
ruleAndExp:
	ruleMinusExp
	(
		RULE_ANDAND
		ruleMinusExp
	)*
;

// Rule MinusExp
ruleMinusExp:
	rulePriExp
	(
		RULE_MINUS
		rulePriExp
	)*
;

// Rule PriExp
rulePriExp:
	'('
	ruleProduct_expr
	')'
;

// Rule Fextension
ruleFextension:
	RULE_TYPE_IDENTIFIER
	'{'
	ruleFeature_decl_group
	?
	(
		ruleFeature_decl_attribute
		    |
		ruleFeature_decl_constraint
	)*
	'}'
;

// Rule Feature_decl
ruleFeature_decl:
	RULE_TYPE_IDENTIFIER
	(
		'{'
		ruleFeature_decl_group
		?
		(
			ruleFeature_decl_attribute
			    |
			ruleFeature_decl_constraint
		)*
		'}'
	)?
;

// Rule Feature_decl_group
ruleFeature_decl_group:
	'group'
	(
		'oneof'
		    |
		'allof'
		    |
		'['
		RULE_INTLITERAL
		'..'
		(
			RULE_INTLITERAL
			    |
			'*'
		)
		']'
	)
	'{'
	ruleFnode
	(
		','
		ruleFnode
	)*
	'}'
;

// Rule Fnode
ruleFnode:
	'opt'
	?
	ruleFeature_decl
;

// Rule Feature_decl_attribute
ruleFeature_decl_attribute:
	(
		RULE_TYPE_IDENTIFIER
		RULE_IDENTIFIER
		'in'
		'{'
		ruleBoundary_val
		(
			','
			ruleBoundary_val
		)*
		'}'
		    |
		RULE_TYPE_IDENTIFIER
		RULE_IDENTIFIER
		'in'
		'['
		ruleBoundary_int
		'..'
		ruleBoundary_int
		']'
		';'
		    |
		RULE_TYPE_IDENTIFIER
		RULE_IDENTIFIER
		'['
		ruleBoundary_int
		'..'
		ruleBoundary_int
		']'
		RULE_IDENTIFIER
		';'
		    |
		RULE_TYPE_IDENTIFIER
		RULE_IDENTIFIER
		';'
	)
;

// Rule Feature_decl_constraint
ruleFeature_decl_constraint:
	(
		(
			'ifin'
			':'
		)?
		ruleMexp
		';'
		    |
		'ifout'
		':'
		ruleMexp
		';'
		    |
		'exclude'
		':'
		RULE_TYPE_IDENTIFIER
		';'
		    |
		'require'
		':'
		RULE_TYPE_IDENTIFIER
		';'
	)
;

// Rule Mexp
ruleMexp:
	ruleMexpExpression
	?
;

// Rule MexpExpression
ruleMexpExpression:
	ruleOr_expr
;

// Rule Or_expr
ruleOr_expr:
	ruleAnd_expr
	(
		RULE_OROR
		ruleAnd_expr
	)*
;

// Rule And_expr
ruleAnd_expr:
	ruleImplies_expr
	(
		RULE_ANDAND
		ruleImplies_expr
	)*
;

// Rule Implies_expr
ruleImplies_expr:
	ruleEquality_expr
	(
		(
			'=>'
			    |
			'<->'
		)
		ruleEquality_expr
	)*
;

// Rule Equality_expr
ruleEquality_expr:
	ruleCompare_expr
	(
		(
			RULE_EQEQ
			    |
			RULE_NOTEQ
		)
		ruleCompare_expr
	)*
;

// Rule Compare_expr
ruleCompare_expr:
	rulePlusMinus_expr
	(
		(
			RULE_LT
			    |
			RULE_GT
			    |
			RULE_LTEQ
			    |
			RULE_GTEQ
		)
		rulePlusMinus_expr
	)*
;

// Rule PlusMinus_expr
rulePlusMinus_expr:
	ruleMulDivMo_expr
	(
		(
			RULE_PLUS
			    |
			RULE_MINUS
		)
		ruleMulDivMo_expr
	)*
;

// Rule MulDivMo_expr
ruleMulDivMo_expr:
	ruleUnitaryMinus
	(
		(
			RULE_MULT
			    |
			RULE_DIV
			    |
			RULE_MOD
		)
		ruleUnitaryMinus
	)*
;

// Rule UnitaryMinus
ruleUnitaryMinus:
	(
		rulePrimaryExp
		    |
		(
			RULE_NEGATION
			    |
			RULE_MINUS
		)
		ruleUnitaryMinus
	)
;

// Rule PrimaryExp
rulePrimaryExp:
	(
		'('
		ruleMexp
		')'
		    |
		RULE_IDENTIFIER
		    |
		RULE_TYPE_IDENTIFIER
		    |
		RULE_INTLITERAL
		    |
		RULE_TYPE_IDENTIFIER
		'.'
		RULE_IDENTIFIER
	)
;

// Rule Boundary_val
ruleBoundary_val:
	'-'
	?
	RULE_INTLITERAL
;

// Rule Boundary_int
ruleBoundary_int:
	(
		'*'
		    |
		ruleBoundary_val
	)
;

// Rule Exp
ruleExp:
	(
		ruleEff_exp
		    |
		rulePure_exp
	)
;

// Rule Eff_exp
ruleEff_exp:
	(
		rulePure_exp
		'.'
		'get'
		    |
		'new'
		'local'?
		RULE_QUALIFIED_TYPE_IDENTIFIER
		'('
		rulePure_exp_list
		')'
		    |
		'await'?
		rulePure_exp
		RULE_NEGATION
		RULE_IDENTIFIER
		'('
		rulePure_exp_list
		')'
		    |
		rulePure_exp
		'.'
		RULE_IDENTIFIER
		'('
		rulePure_exp_list
		')'
		    |
		(
			(
				RULE_TYPE_IDENTIFIER
				    |
				'core'
			)
			'.'
		)?
		'original'
		'('
		rulePure_exp_list
		')'
	)
;

// Rule Pure_exp
rulePure_exp:
	(
		RULE_QUALIFIED_IDENTFIER
		'('
		rulePure_exp_list
		')'
		    |
		RULE_QUALIFIED_IDENTFIER
		'['
		rulePure_exp_list
		']'
		    |
		RULE_QUALIFIED_TYPE_IDENTIFIER
		'('
		rulePure_exp_list
		')'
		    |
		ruleVar_or_field_ref
		    |
		RULE_INTLITERAL
		    |
		'this'
		    |
		'null'
		    |
		'if'
		rulePure_exp
		'then'
		rulePure_exp
		'else'
		rulePure_exp
		    |
		'case'
		rulePure_exp
		'{'
		ruleCasebranch
		*
		'}'
		    |
		'let'
		'('
		ruleType_use
		RULE_IDENTIFIER
		')'
		'='
		rulePure_exp
		'in'
		rulePure_exp
		    |
		rulePureExpression
	)
;

// Rule PureExpression
rulePureExpression:
	ruleOr_exp
;

// Rule Or_exp
ruleOr_exp:
	ruleAnd_exp
	(
		RULE_OROR
		ruleAnd_exp
	)*
;

// Rule And_exp
ruleAnd_exp:
	ruleImplies_exp
	(
		RULE_ANDAND
		ruleImplies_exp
	)*
;

// Rule Implies_exp
ruleImplies_exp:
	ruleEquality_exp
	(
		(
			'=>'
			    |
			'<->'
		)
		ruleEquality_exp
	)*
;

// Rule Equality_exp
ruleEquality_exp:
	ruleCompare_exp
	(
		(
			RULE_EQEQ
			    |
			RULE_NOTEQ
		)
		ruleCompare_exp
	)*
;

// Rule Compare_exp
ruleCompare_exp:
	rulePlusMinus_exp
	(
		(
			RULE_LT
			    |
			RULE_GT
			    |
			RULE_LTEQ
			    |
			RULE_GTEQ
		)
		rulePlusMinus_exp
	)*
;

// Rule PlusMinus_exp
rulePlusMinus_exp:
	ruleMulDivMo_exp
	(
		(
			RULE_PLUS
			    |
			RULE_MINUS
		)
		ruleMulDivMo_exp
	)*
;

// Rule MulDivMo_exp
ruleMulDivMo_exp:
	ruleUnitaryMinusExp
	(
		(
			RULE_MULT
			    |
			'/'
			    |
			RULE_MOD
		)
		ruleUnitaryMinusExp
	)*
;

// Rule UnitaryMinusExp
ruleUnitaryMinusExp:
	(
		rulePrimaryExpr
		    |
		(
			RULE_NEGATION
			    |
			RULE_MINUS
			    |
			RULE_NEGATION_CREOL
		)
		ruleUnitaryMinusExp
	)
;

// Rule PrimaryExpr
rulePrimaryExpr:
	'('
	rulePure_exp
	')'
;

// Rule Casebranch
ruleCasebranch:
	rulePattern
	RULE_IMPLIES
	rulePure_exp
	';'
;

// Rule Pattern
rulePattern:
	(
		'_'
		    |
		RULE_INTLITERAL
		    |
		RULE_STRINGLITERAL
		    |
		RULE_IDENTIFIER
		    |
		RULE_QUALIFIED_TYPE_IDENTIFIER
		'('
		(
			rulePattern
			(
				','
				rulePattern
			)*
		)?
		')'
	)
;

// Rule Pure_exp_list
rulePure_exp_list:
	(
		rulePure_exp
		(
			','
			rulePure_exp
		)*
	)?
;

// Rule Type_exp
ruleType_exp:
	RULE_QUALIFIED_TYPE_IDENTIFIER
	(
		RULE_LT
		ruleType_use
		(
			','
			ruleType_use
		)*
		RULE_GT
	)?
;

// Rule Type_use
ruleType_use:
	ruleAnnotations
	RULE_QUALIFIED_TYPE_IDENTIFIER
	(
		RULE_LT
		ruleType_use
		(
			','
			ruleType_use
		)*
		RULE_GT
	)?
;

// Rule Annotations
ruleAnnotations:
	(
		'['
		ruleAnnotation
		(
			','
			ruleAnnotation
		)*
		']'
	)*
;

// Rule Annotation
ruleAnnotation:
	(
		ruleType_use
		':'
	)?
	rulePure_exp
;

// Rule Stmt
ruleStmt:
	(
		ruleAnnotations
		ruleType_exp
		RULE_IDENTIFIER
		(
			'='
			ruleExp
		)?
		';'
		    |
		ruleAnnotations
		ruleVar_or_field_ref
		'='
		ruleExp
		';'
		    |
		ruleAnnotations
		'skip'
		';'
		    |
		ruleAnnotations
		'return'
		ruleExp
		';'
		    |
		ruleAnnotations
		'assert'
		ruleExp
		';'
		    |
		ruleAnnotations
		'{'
		ruleStmt
		*
		'}'
		    |
		ruleAnnotations
		'if'
		'('
		rulePure_exp
		')'
		ruleStmt
		(
			'else'
			ruleStmt
		)?
		    |
		ruleAnnotations
		'while'
		'('
		rulePure_exp
		')'
		ruleStmt
		    |
		ruleAnnotations
		'foreach'
		'('
		RULE_IDENTIFIER
		'in'
		rulePure_exp
		')'
		ruleStmt
		    |
		ruleAnnotations
		'try'
		ruleStmt
		'catch'
		(
			'{'
			ruleCasestmtbranch
			*
			'}'
			    |
			ruleCasestmtbranch
		)
		(
			'finally'
			ruleStmt
		)?
		    |
		ruleAnnotations
		'await'
		ruleGuard
		';'
		    |
		ruleAnnotations
		'suspend'
		';'
		    |
		ruleAnnotations
		'duration'
		'('
		rulePure_exp
		','
		rulePure_exp
		')'
		';'
		    |
		ruleAnnotations
		'throw'
		rulePure_exp
		';'
		    |
		ruleAnnotations
		'die'
		rulePure_exp
		';'
		    |
		ruleAnnotations
		'movecogto'
		rulePure_exp
		';'
		    |
		ruleAnnotations
		ruleExp
		';'
		    |
		ruleAnnotations
		'case'
		rulePure_exp
		'{'
		ruleCasestmtbranch
		*
		'}'
	)
;

// Rule Guard
ruleGuard:
	(
		ruleVar_or_field_ref
		'?'
		    |
		'duration'
		'('
		rulePure_exp
		','
		rulePure_exp
		')'
		    |
		rulePure_exp
	)
;

// Rule Casestmtbranch
ruleCasestmtbranch:
	rulePattern
	RULE_IMPLIES
	ruleStmt
;

// Rule Datatype_decl
ruleDatatype_decl:
	ruleAnnotations
	'data'
	RULE_TYPE_IDENTIFIER
	(
		RULE_LT
		RULE_TYPE_IDENTIFIER
		(
			','
			RULE_TYPE_IDENTIFIER
		)*
		RULE_GT
	)?
	(
		'='
		ruleData_constructor
		(
			'|'
			ruleData_constructor
		)*
	)?
	';'
;

// Rule Data_constructor
ruleData_constructor:
	RULE_TYPE_IDENTIFIER
	(
		'('
		ruleData_constructor_arg
		(
			','
			ruleData_constructor_arg
		)*
		')'
	)?
;

// Rule Data_constructor_arg
ruleData_constructor_arg:
	ruleType_use
	RULE_IDENTIFIER?
;

// Rule Typesyn_decl
ruleTypesyn_decl:
	ruleAnnotations
	'type'
	RULE_TYPE_IDENTIFIER
	'='
	ruleType_use
	';'
;

// Rule Exception_decl
ruleException_decl:
	ruleAnnotations
	'exception'
	RULE_TYPE_IDENTIFIER
	(
		'('
		ruleData_constructor_arg
		(
			','
			ruleData_constructor_arg
		)*
		')'
	)?
	';'
;

// Rule Function_decl
ruleFunction_decl:
	ruleAnnotations
	'def'
	ruleType_use
	RULE_IDENTIFIER
	(
		RULE_LT
		RULE_TYPE_IDENTIFIER
		(
			','
			RULE_TYPE_IDENTIFIER
		)*
		RULE_GT
	)?
	ruleParamlist
	'='
	(
		'builtin'
		    |
		rulePure_exp
	)
	';'
;

// Rule Interface_decl
ruleInterface_decl:
	ruleAnnotation
	*
	'interface'
	RULE_TYPE_IDENTIFIER
	(
		'extends'
		RULE_INTERFACE_NAME
		(
			','
			RULE_INTERFACE_NAME
		)*
	)?
	'{'
	ruleMethodsig
	*
	'}'
;

// Rule Methodsig
ruleMethodsig:
	ruleAnnotation
	*
	ruleType_use
	RULE_IDENTIFIER
	ruleParamlist
	';'
;

// Rule Class_decl
ruleClass_decl:
	ruleAnnotation
	*
	'class'
	RULE_TYPE_IDENTIFIER
	ruleParamlist
	?
	(
		'implements'
		RULE_INTERFACE_NAME
		(
			','
			RULE_INTERFACE_NAME
		)*
	)?
	'{'
	ruleField_decl
	*
	(
		'{'
		ruleStmt
		*
		'}'
	)?
	(
		'recover'
		'{'
		ruleCasestmtbranch
		*
		'}'
	)?
	ruleTrait_usage
	*
	ruleMethod
	*
	'}'
;

// Rule Method
ruleMethod:
	ruleAnnotation
	*
	ruleType_use
	RULE_IDENTIFIER
	ruleParamlist
	'{'
	ruleStmt
	*
	'}'
;

// Rule Module_decl
ruleModule_decl:
	'module'
	RULE_QUALIFIED_TYPE_IDENTIFIER
	';'
	ruleModule_export
	*
	ruleModule_import
	*
	ruleDecl
	*
	ruleMain_block
	?
;

// Rule Main_block
ruleMain_block:
	ruleAnnotation
	*
	'{'
	ruleStmt
	*
	'}'
;

// Rule Module_export
ruleModule_export:
	'export'
	(
		'*'
		    |
		RULE_ANY_IDENTIFIER
		(
			','
			RULE_ANY_IDENTIFIER
		)*
	)
	(
		'from'
		RULE_QUALIFIED_TYPE_IDENTIFIER
	)?
	';'
;

// Rule Module_import
ruleModule_import:
	'import'
	(
		'*'
		'from'
		RULE_QUALIFIED_TYPE_IDENTIFIER
		';'
		    |
		RULE_ANY_IDENTIFIER
		(
			','
			RULE_ANY_IDENTIFIER
		)*
		'from'
		RULE_QUALIFIED_TYPE_IDENTIFIER
		';'
		    |
		RULE_ANY_IDENTIFIER
		(
			','
			RULE_ANY_IDENTIFIER
		)*
		';'
	)
;

// Rule Decl
ruleDecl:
	(
		ruleDatatype_decl
		    |
		ruleFunction_decl
		    |
		ruleTypesyn_decl
		    |
		ruleException_decl
		    |
		ruleInterface_decl
		    |
		ruleClass_decl
		    |
		ruleTrait_decl
	)
;

// Rule Trait_decl
ruleTrait_decl:
	'trait'
	RULE_TYPE_IDENTIFIER
	'='
	ruleTrait_expr
;

// Rule Trait_expr
ruleTrait_expr:
	(
		(
			'{'
			ruleMethod
			*
			'}'
			    |
			ruleMethod
			    |
			RULE_TYPE_IDENTIFIER
		)
		    |
		RULE_TYPE_IDENTIFIER
		ruleTrait_oper
	)
;

// Rule Trait_oper
ruleTrait_oper:
	(
		'removes'
		ruleMethodsig
		    |
		'removes'
		'{'
		ruleMethod
		*
		'}'
		    |
		'adds'
		ruleTrait_expr
		    |
		'modifies'
		ruleTrait_expr
	)
;

// Rule Trait_usage
ruleTrait_usage:
	'uses'
	ruleTrait_expr
	';'
;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

fragment RULE_STR_ESC : '\\' ('\\'|'"');

RULE_STRINGLITERAL : '"' (RULE_STR_ESC|RULE_NEGATION_CREOL ('\\'|'"'|'\r'|'\n'))* '"';

fragment RULE_SMALLLETTER : 'a'..'z';

fragment RULE_CAPITALLETTER : 'A'..'Z';

fragment RULE_DIGIT : '0'..'9';

RULE_INTLITERAL : RULE_DIGIT RULE_DIGIT*;

RULE_IDENTIFIER : RULE_SMALLLETTER (RULE_SMALLLETTER|'_'|RULE_DIGIT)*;

RULE_TYPE_IDENTIFIER : RULE_CAPITALLETTER (RULE_SMALLLETTER|'_'|RULE_DIGIT)*;

RULE_QUALIFIED_IDENTFIER : RULE_TYPE_IDENTIFIER ('.' RULE_IDENTIFIER)*;

RULE_QUALIFIED_TYPE_IDENTIFIER : (RULE_TYPE_IDENTIFIER '.')* RULE_TYPE_IDENTIFIER;

RULE_NEGATION_CREOL : '~';

RULE_NEGATION : '!';

RULE_MINUS : ' - ';

RULE_MULT : ' * ';

RULE_DIV : ' / ';

RULE_MOD : '%';

RULE_PLUS : '+';

RULE_LTEQ : '<=';

RULE_GTEQ : '>=';

RULE_LT : '<';

RULE_GT : '>';

RULE_ANDAND : '&&';

RULE_OROR : '||';

RULE_EQEQ : '==';

RULE_NOTEQ : '!=';

RULE_IMPLIES : '->';

RULE_ANY_IDENTIFIER : (RULE_QUALIFIED_TYPE_IDENTIFIER|RULE_QUALIFIED_IDENTFIER);

RULE_INTERFACE_NAME : RULE_QUALIFIED_TYPE_IDENTIFIER;
